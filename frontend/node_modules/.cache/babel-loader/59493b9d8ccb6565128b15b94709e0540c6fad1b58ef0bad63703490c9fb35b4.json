{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u8F6F\\u4EF6\\u5DE5\\u7A0B\\\\\\u667A\\u6167\\u6D77\\u6D0B\\u7267\\u573A\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\\\\frontend\\\\src\\\\pages\\\\FishVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Card, Row, Col, Select, Spin, message, Button, Space } from 'antd';\nimport { Bar, Scatter } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { DownloadOutlined } from '@ant-design/icons';\n\n// 导入 Select.Option\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nfunction FishDataVisualization() {\n  _s();\n  const [fishData, setFishData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedSpecies, setSelectedSpecies] = useState('');\n  const [availableSpecies, setAvailableSpecies] = useState([]);\n\n  // 创建对图表组件的引用\n  const weightBarChartRef = useRef(null);\n  const generalScatterChartRef = useRef(null);\n  const singleSpeciesChartRef = useRef(null);\n\n  // 从后端获取鱼类数据\n  useEffect(() => {\n    fetchFishData();\n  }, [selectedSpecies]);\n  const fetchFishData = async () => {\n    setIsLoading(true);\n    try {\n      const formData = new FormData();\n      if (selectedSpecies) {\n        formData.append('species', selectedSpecies);\n      }\n      const response = await fetch('http://localhost:3001/visualize-fish', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) throw new Error(await response.text());\n      const data = await response.json();\n      setFishData(data);\n\n      // 提取可用的鱼种列表\n      if (data.bar_chart_data) {\n        const species = data.bar_chart_data.map(item => item.Species);\n        setAvailableSpecies(species);\n      }\n    } catch (err) {\n      message.error(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 渲染平均重量柱状图\n  const renderWeightBarChart = () => {\n    if (!fishData || !fishData.bar_chart_data) return null;\n    const {\n      bar_chart_data\n    } = fishData;\n    const labels = bar_chart_data.map(item => item.Species);\n    const values = bar_chart_data.map(item => item['Weight(g)']);\n    return /*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u6BCF\\u79CD\\u9C7C\\u7C7B\\u7684\\u5E73\\u5747\\u91CD\\u91CF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Space, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 23\n            }, this),\n            size: \"small\",\n            onClick: () => downloadChart(weightBarChartRef, '平均重量柱状图'),\n            children: \"PNG\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 23\n            }, this),\n            size: \"small\",\n            onClick: () => downloadChartAsPDF([weightBarChartRef], '鱼类数据可视化报告'),\n            children: \"PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this),\n      bordered: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '350px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Bar, {\n          ref: weightBarChartRef,\n          data: {\n            labels: labels,\n            datasets: [{\n              label: '平均重量 (g)',\n              data: values,\n              backgroundColor: ['rgba(54, 162, 235, 0.7)', 'rgba(255, 99, 132, 0.7)', 'rgba(255, 206, 86, 0.7)', 'rgba(75, 192, 192, 0.7)', 'rgba(153, 102, 255, 0.7)', 'rgba(255, 159, 64, 0.7)', 'rgba(173, 216, 230, 0.7)'],\n              borderColor: ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 206, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(255, 159, 64)', 'rgb(173, 216, 230)'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top'\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                title: {\n                  display: true,\n                  text: '平均重量 (g)'\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 渲染所有鱼类长度和宽度关系散点图\n  const renderGeneralScatterChart = () => {\n    if (!fishData || !fishData.scatter_chart_data) return null;\n\n    // 按鱼种分组数据\n    const speciesGroups = {};\n    fishData.scatter_chart_data.forEach(item => {\n      if (!speciesGroups[item.Species]) {\n        speciesGroups[item.Species] = [];\n      }\n      speciesGroups[item.Species].push({\n        x: item['Length1(cm)'],\n        y: item['Width(cm)']\n      });\n    });\n\n    // 为每个鱼种创建数据集\n    const datasets = Object.keys(speciesGroups).map(species => ({\n      label: species,\n      data: speciesGroups[species],\n      backgroundColor: getRandomColor(0.7),\n      borderColor: getRandomColor(),\n      borderWidth: 1,\n      pointRadius: 4,\n      pointHoverRadius: 6\n    }));\n    return /*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u9C7C\\u7C7B\\u7684\\u957F\\u5EA6\\u548C\\u5BBD\\u5EA6\\u5173\\u7CFB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Space, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 23\n            }, this),\n            size: \"small\",\n            onClick: () => downloadChart(generalScatterChartRef, '长度宽度关系散点图'),\n            children: \"PNG\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 23\n            }, this),\n            size: \"small\",\n            onClick: () => downloadChartAsPDF([generalScatterChartRef], '鱼类数据可视化报告'),\n            children: \"PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this),\n      bordered: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '350px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Scatter, {\n          ref: generalScatterChartRef,\n          data: {\n            datasets: datasets\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    const point = context.parsed;\n                    return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\n                  }\n                }\n              }\n            },\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                title: {\n                  display: true,\n                  text: '长度 (cm)'\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: '宽度 (cm)'\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 渲染特定鱼种的散点图（带回归线）\n  const renderSingleSpeciesScatterChart = () => {\n    if (!fishData || !fishData.single_species_data) return null;\n    const {\n      single_species_data\n    } = fishData;\n    const {\n      species,\n      data,\n      stats\n    } = single_species_data;\n\n    // 准备散点数据\n    const scatterData = data.map(item => ({\n      x: item['Length1(cm)'],\n      y: item['Width(cm)']\n    }));\n\n    // 计算回归线数据\n    const regressionLine = calculateRegressionLine(scatterData);\n    return /*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: `${species} 的长度和宽度关系 (相关系数: ${stats.correlation.toFixed(2)})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Space, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 23\n            }, this),\n            size: \"small\",\n            onClick: () => downloadChart(singleSpeciesChartRef, `${species}长度宽度关系图`),\n            children: \"PNG\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 23\n            }, this),\n            size: \"small\",\n            onClick: () => downloadChartAsPDF([singleSpeciesChartRef], `${species}数据可视化报告`),\n            children: \"PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this),\n      borderColor: \"#1890ff\",\n      style: {\n        borderWidth: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '350px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Scatter, {\n          ref: singleSpeciesChartRef,\n          data: {\n            datasets: [{\n              label: `${species} 样本点`,\n              data: scatterData,\n              backgroundColor: 'rgba(30, 144, 255, 0.5)',\n              borderColor: 'rgba(30, 144, 255, 1)',\n              borderWidth: 1,\n              pointRadius: 4,\n              pointHoverRadius: 6\n            }, {\n              label: '回归线',\n              data: regressionLine,\n              backgroundColor: 'rgba(220, 20, 60, 0)',\n              borderColor: 'rgba(220, 20, 60, 1)',\n              borderWidth: 2,\n              pointRadius: 0,\n              showLine: true,\n              fill: false\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    if (context.dataset.label === '回归线') {\n                      return [`回归线: y = ${regressionLine.slope.toFixed(4)}x + ${regressionLine.intercept.toFixed(4)}`];\n                    }\n                    const point = context.parsed;\n                    return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\n                  }\n                }\n              }\n            },\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                title: {\n                  display: true,\n                  text: '长度 (cm)'\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: '宽度 (cm)'\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '10px',\n          backgroundColor: '#f5f7fa',\n          borderRadius: '4px',\n          marginTop: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u6837\\u672C\\u6570\\u91CF: \", stats.sample_size, \" | \\u5E73\\u5747\\u957F\\u5EA6: \", stats.avg_length.toFixed(2), \" cm | \\u5E73\\u5747\\u5BBD\\u5EA6: \", stats.avg_width.toFixed(2), \" cm\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 计算回归线\n  const calculateRegressionLine = dataPoints => {\n    const xValues = dataPoints.map(p => p.x);\n    const yValues = dataPoints.map(p => p.y);\n    const n = xValues.length;\n    let sumX = 0,\n      sumY = 0,\n      sumXY = 0,\n      sumX2 = 0;\n    for (let i = 0; i < n; i++) {\n      sumX += xValues[i];\n      sumY += yValues[i];\n      sumXY += xValues[i] * yValues[i];\n      sumX2 += xValues[i] * xValues[i];\n    }\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n\n    // 生成回归线上的点\n    const xMin = Math.min(...xValues);\n    const xMax = Math.max(...xValues);\n    const regressionPoints = [{\n      x: xMin,\n      y: slope * xMin + intercept\n    }, {\n      x: xMax,\n      y: slope * xMax + intercept\n    }];\n    return {\n      data: regressionPoints,\n      slope: slope,\n      intercept: intercept\n    };\n  };\n\n  // 生成随机颜色\n  const getRandomColor = (alpha = 1) => {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  };\n\n  // 下载当前图表为PNG\n  const downloadChart = (chartRef, fileName) => {\n    if (!chartRef.current) {\n      message.error('图表尚未加载完成');\n      return;\n    }\n    try {\n      // 获取图表的canvas元素\n      const canvas = chartRef.current.chartInstance.canvas;\n\n      // 创建下载链接\n      const link = document.createElement('a');\n      link.download = `${fileName}.png`;\n      link.href = canvas.toDataURL('image/png');\n      link.click();\n      message.success('图表下载成功');\n    } catch (error) {\n      console.error('下载图表时出错:', error);\n      message.error('下载图表失败');\n    }\n  };\n\n  // 下载图表为PDF (需要引入jsPDF库)\n  const downloadChartAsPDF = (chartRefs, fileName) => {\n    // 检查是否已加载jsPDF库\n    if (!window.jspdf) {\n      message.warning('PDF下载功能需要jsPDF库，请先引入');\n      return;\n    }\n    try {\n      const {\n        jsPDF\n      } = window.jspdf;\n      const doc = new jsPDF('landscape'); // 创建横向PDF\n\n      chartRefs.forEach((chartRef, index) => {\n        if (chartRef.current) {\n          const canvas = chartRef.current.chartInstance.canvas;\n          const imgData = canvas.toDataURL('image/jpeg', 1.0);\n\n          // 添加图片到PDF\n          if (index > 0) doc.addPage();\n          doc.addImage(imgData, 'JPEG', 10, 10, 280, 150);\n        }\n      });\n\n      // 保存PDF\n      doc.save(`${fileName}.pdf`);\n      message.success('PDF下载成功');\n    } catch (error) {\n      console.error('下载PDF时出错:', error);\n      message.error('下载PDF失败');\n    }\n  };\n\n  // 处理鱼种选择\n  const handleSpeciesChange = value => {\n    setSelectedSpecies(value);\n  };\n\n  // 添加一个全局下载所有图表的按钮\n  const downloadAllCharts = () => {\n    const chartsToDownload = [];\n    if (weightBarChartRef.current) chartsToDownload.push(weightBarChartRef);\n    if (generalScatterChartRef.current) chartsToDownload.push(generalScatterChartRef);\n    if (singleSpeciesChartRef.current) chartsToDownload.push(singleSpeciesChartRef);\n    if (chartsToDownload.length === 0) {\n      message.error('没有可下载的图表');\n      return;\n    }\n    downloadChartAsPDF(chartsToDownload, '鱼类数据可视化完整报告');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: '#1890ff',\n          fontSize: '2rem',\n          fontWeight: '600'\n        },\n        children: \"\\u9C7C\\u7C7B\\u6570\\u636E\\u53EF\\u89C6\\u5316\\u5206\\u6790\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 17\n        }, this),\n        onClick: downloadAllCharts,\n        children: \"\\u4E0B\\u8F7D\\u5168\\u90E8\\u56FE\\u8868\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Spin, {\n      spinning: isLoading,\n      tip: \"\\u52A0\\u8F7D\\u9C7C\\u7C7B\\u6570\\u636E...\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '30px',\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          value: selectedSpecies,\n          onChange: handleSpeciesChange,\n          style: {\n            width: '300px',\n            height: '52px',\n            fontSize: '16px'\n          },\n          placeholder: \"\\u9009\\u62E9\\u9C7C\\u79CD\\u67E5\\u770B\\u8BE6\\u7EC6\\u5206\\u6790\",\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: \"\",\n            children: \"\\u5168\\u90E8\\u9C7C\\u7C7B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this), availableSpecies.map((species, index) => /*#__PURE__*/_jsxDEV(Option, {\n            value: species,\n            children: species\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        gutter: 16,\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 24,\n          md: 12,\n          children: renderWeightBarChart()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 24,\n          md: 12,\n          children: renderGeneralScatterChart()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), selectedSpecies && renderSingleSpeciesScatterChart()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 472,\n    columnNumber: 5\n  }, this);\n}\n_s(FishDataVisualization, \"aawlCkCNLIf81CukVilqKlaKpn0=\");\n_c = FishDataVisualization;\nexport default FishDataVisualization;\nvar _c;\n$RefreshReg$(_c, \"FishDataVisualization\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Card","Row","Col","Select","Spin","message","Button","Space","Bar","Scatter","Chart","DownloadOutlined","jsxDEV","_jsxDEV","Option","FishDataVisualization","_s","fishData","setFishData","isLoading","setIsLoading","selectedSpecies","setSelectedSpecies","availableSpecies","setAvailableSpecies","weightBarChartRef","generalScatterChartRef","singleSpeciesChartRef","fetchFishData","formData","FormData","append","response","fetch","method","body","ok","Error","text","data","json","bar_chart_data","species","map","item","Species","err","error","renderWeightBarChart","labels","values","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","icon","size","onClick","downloadChart","downloadChartAsPDF","bordered","style","height","ref","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","scales","y","beginAtZero","display","renderGeneralScatterChart","scatter_chart_data","speciesGroups","forEach","push","x","Object","keys","getRandomColor","pointRadius","pointHoverRadius","tooltip","callbacks","context","point","parsed","type","renderSingleSpeciesScatterChart","single_species_data","stats","scatterData","regressionLine","calculateRegressionLine","correlation","toFixed","showLine","fill","dataset","slope","intercept","padding","borderRadius","marginTop","sample_size","avg_length","avg_width","dataPoints","xValues","p","yValues","n","length","sumX","sumY","sumXY","sumX2","i","xMin","Math","min","xMax","max","regressionPoints","alpha","r","floor","random","g","b","chartRef","current","canvas","chartInstance","link","document","createElement","download","href","toDataURL","click","success","console","chartRefs","window","jspdf","warning","jsPDF","doc","index","imgData","addPage","addImage","save","handleSpeciesChange","value","downloadAllCharts","chartsToDownload","color","fontSize","fontWeight","spinning","tip","marginBottom","textAlign","onChange","width","placeholder","gutter","xs","md","_c","$RefreshReg$"],"sources":["D:/软件工程/智慧海洋牧场可视化系统/frontend/src/pages/FishVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Card, Row, Col, Select, Spin, message, Button, Space } from 'antd';\r\nimport { Bar, Scatter } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\n\r\n// 导入 Select.Option\r\nconst { Option } = Select;\r\n\r\nfunction FishDataVisualization() {\r\n  const [fishData, setFishData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedSpecies, setSelectedSpecies] = useState('');\r\n  const [availableSpecies, setAvailableSpecies] = useState([]);\r\n  \r\n  // 创建对图表组件的引用\r\n  const weightBarChartRef = useRef(null);\r\n  const generalScatterChartRef = useRef(null);\r\n  const singleSpeciesChartRef = useRef(null);\r\n\r\n  // 从后端获取鱼类数据\r\n  useEffect(() => {\r\n    fetchFishData();\r\n  }, [selectedSpecies]);\r\n\r\n  const fetchFishData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const formData = new FormData();\r\n      if (selectedSpecies) {\r\n        formData.append('species', selectedSpecies);\r\n      }\r\n\r\n      const response = await fetch('http://localhost:3001/visualize-fish', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n\r\n      if (!response.ok) throw new Error(await response.text());\r\n\r\n      const data = await response.json();\r\n      setFishData(data);\r\n\r\n      // 提取可用的鱼种列表\r\n      if (data.bar_chart_data) {\r\n        const species = data.bar_chart_data.map(item => item.Species);\r\n        setAvailableSpecies(species);\r\n      }\r\n\r\n    } catch (err) {\r\n      message.error(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 渲染平均重量柱状图\r\n  const renderWeightBarChart = () => {\r\n    if (!fishData || !fishData.bar_chart_data) return null;\r\n\r\n    const { bar_chart_data } = fishData;\r\n    const labels = bar_chart_data.map(item => item.Species);\r\n    const values = bar_chart_data.map(item => item['Weight(g)']);\r\n\r\n    return (\r\n      <Card \r\n        title={\r\n          <div className=\"flex justify-between items-center\">\r\n            <span>每种鱼类的平均重量</span>\r\n            <Space>\r\n              <Button \r\n                icon={<DownloadOutlined />} \r\n                size=\"small\"\r\n                onClick={() => downloadChart(weightBarChartRef, '平均重量柱状图')}\r\n              >\r\n                PNG\r\n              </Button>\r\n              <Button \r\n                icon={<DownloadOutlined />} \r\n                size=\"small\"\r\n                onClick={() => downloadChartAsPDF([weightBarChartRef], '鱼类数据可视化报告')}\r\n              >\r\n                PDF\r\n              </Button>\r\n            </Space>\r\n          </div>\r\n        }\r\n        bordered={true}\r\n      >\r\n        <div style={{ height: '350px' }}>\r\n          <Bar\r\n            ref={weightBarChartRef}\r\n            data={{\r\n              labels: labels,\r\n              datasets: [{\r\n                label: '平均重量 (g)',\r\n                data: values,\r\n                backgroundColor: [\r\n                  'rgba(54, 162, 235, 0.7)',\r\n                  'rgba(255, 99, 132, 0.7)',\r\n                  'rgba(255, 206, 86, 0.7)',\r\n                  'rgba(75, 192, 192, 0.7)',\r\n                  'rgba(153, 102, 255, 0.7)',\r\n                  'rgba(255, 159, 64, 0.7)',\r\n                  'rgba(173, 216, 230, 0.7)'\r\n                ],\r\n                borderColor: [\r\n                  'rgb(54, 162, 235)',\r\n                  'rgb(255, 99, 132)',\r\n                  'rgb(255, 206, 86)',\r\n                  'rgb(75, 192, 192)',\r\n                  'rgb(153, 102, 255)',\r\n                  'rgb(255, 159, 64)',\r\n                  'rgb(173, 216, 230)'\r\n                ],\r\n                borderWidth: 1\r\n              }]\r\n            }}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                }\r\n              },\r\n              scales: {\r\n                y: {\r\n                  beginAtZero: true,\r\n                  title: {\r\n                    display: true,\r\n                    text: '平均重量 (g)'\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // 渲染所有鱼类长度和宽度关系散点图\r\n  const renderGeneralScatterChart = () => {\r\n    if (!fishData || !fishData.scatter_chart_data) return null;\r\n\r\n    // 按鱼种分组数据\r\n    const speciesGroups = {};\r\n    fishData.scatter_chart_data.forEach(item => {\r\n      if (!speciesGroups[item.Species]) {\r\n        speciesGroups[item.Species] = [];\r\n      }\r\n      speciesGroups[item.Species].push({\r\n        x: item['Length1(cm)'],\r\n        y: item['Width(cm)']\r\n      });\r\n    });\r\n\r\n    // 为每个鱼种创建数据集\r\n    const datasets = Object.keys(speciesGroups).map(species => ({\r\n      label: species,\r\n      data: speciesGroups[species],\r\n      backgroundColor: getRandomColor(0.7),\r\n      borderColor: getRandomColor(),\r\n      borderWidth: 1,\r\n      pointRadius: 4,\r\n      pointHoverRadius: 6\r\n    }));\r\n\r\n    return (\r\n      <Card \r\n        title={\r\n          <div className=\"flex justify-between items-center\">\r\n            <span>鱼类的长度和宽度关系</span>\r\n            <Space>\r\n              <Button \r\n                icon={<DownloadOutlined />} \r\n                size=\"small\"\r\n                onClick={() => downloadChart(generalScatterChartRef, '长度宽度关系散点图')}\r\n              >\r\n                PNG\r\n              </Button>\r\n              <Button \r\n                icon={<DownloadOutlined />} \r\n                size=\"small\"\r\n                onClick={() => downloadChartAsPDF([generalScatterChartRef], '鱼类数据可视化报告')}\r\n              >\r\n                PDF\r\n              </Button>\r\n            </Space>\r\n          </div>\r\n        }\r\n        bordered={true}\r\n      >\r\n        <div style={{ height: '350px' }}>\r\n          <Scatter\r\n            ref={generalScatterChartRef}\r\n            data={{\r\n              datasets: datasets\r\n            }}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: function(context) {\r\n                      const point = context.parsed;\r\n                      return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\r\n                    }\r\n                  }\r\n                }\r\n              },\r\n              scales: {\r\n                x: {\r\n                  type: 'linear',\r\n                  position: 'bottom',\r\n                  title: {\r\n                    display: true,\r\n                    text: '长度 (cm)'\r\n                  }\r\n                },\r\n                y: {\r\n                  title: {\r\n                    display: true,\r\n                    text: '宽度 (cm)'\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // 渲染特定鱼种的散点图（带回归线）\r\n  const renderSingleSpeciesScatterChart = () => {\r\n    if (!fishData || !fishData.single_species_data) return null;\r\n\r\n    const { single_species_data } = fishData;\r\n    const { species, data, stats } = single_species_data;\r\n\r\n    // 准备散点数据\r\n    const scatterData = data.map(item => ({\r\n      x: item['Length1(cm)'],\r\n      y: item['Width(cm)']\r\n    }));\r\n\r\n    // 计算回归线数据\r\n    const regressionLine = calculateRegressionLine(scatterData);\r\n\r\n    return (\r\n      <Card\r\n        title={\r\n          <div className=\"flex justify-between items-center\">\r\n            <span>{`${species} 的长度和宽度关系 (相关系数: ${stats.correlation.toFixed(2)})`}</span>\r\n            <Space>\r\n              <Button \r\n                icon={<DownloadOutlined />} \r\n                size=\"small\"\r\n                onClick={() => downloadChart(singleSpeciesChartRef, `${species}长度宽度关系图`)}\r\n              >\r\n                PNG\r\n              </Button>\r\n              <Button \r\n                icon={<DownloadOutlined />} \r\n                size=\"small\"\r\n                onClick={() => downloadChartAsPDF([singleSpeciesChartRef], `${species}数据可视化报告`)}\r\n              >\r\n                PDF\r\n              </Button>\r\n            </Space>\r\n          </div>\r\n        }\r\n        borderColor=\"#1890ff\"\r\n        style={{ borderWidth: 2 }}\r\n      >\r\n        <div style={{ height: '350px' }}>\r\n          <Scatter\r\n            ref={singleSpeciesChartRef}\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: `${species} 样本点`,\r\n                  data: scatterData,\r\n                  backgroundColor: 'rgba(30, 144, 255, 0.5)',\r\n                  borderColor: 'rgba(30, 144, 255, 1)',\r\n                  borderWidth: 1,\r\n                  pointRadius: 4,\r\n                  pointHoverRadius: 6\r\n                },\r\n                {\r\n                  label: '回归线',\r\n                  data: regressionLine,\r\n                  backgroundColor: 'rgba(220, 20, 60, 0)',\r\n                  borderColor: 'rgba(220, 20, 60, 1)',\r\n                  borderWidth: 2,\r\n                  pointRadius: 0,\r\n                  showLine: true,\r\n                  fill: false\r\n                }\r\n              ]\r\n            }}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: function(context) {\r\n                      if (context.dataset.label === '回归线') {\r\n                        return [`回归线: y = ${regressionLine.slope.toFixed(4)}x + ${regressionLine.intercept.toFixed(4)}`];\r\n                      }\r\n                      const point = context.parsed;\r\n                      return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\r\n                    }\r\n                  }\r\n                }\r\n              },\r\n              scales: {\r\n                x: {\r\n                  type: 'linear',\r\n                  position: 'bottom',\r\n                  title: {\r\n                    display: true,\r\n                    text: '长度 (cm)'\r\n                  }\r\n                },\r\n                y: {\r\n                  title: {\r\n                    display: true,\r\n                    text: '宽度 (cm)'\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ padding: '10px', backgroundColor: '#f5f7fa', borderRadius: '4px', marginTop: '10px' }}>\r\n          <p>样本数量: {stats.sample_size} | 平均长度: {stats.avg_length.toFixed(2)} cm | 平均宽度: {stats.avg_width.toFixed(2)} cm</p>\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // 计算回归线\r\n  const calculateRegressionLine = (dataPoints) => {\r\n    const xValues = dataPoints.map(p => p.x);\r\n    const yValues = dataPoints.map(p => p.y);\r\n\r\n    const n = xValues.length;\r\n    let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      sumX += xValues[i];\r\n      sumY += yValues[i];\r\n      sumXY += xValues[i] * yValues[i];\r\n      sumX2 += xValues[i] * xValues[i];\r\n    }\r\n\r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\r\n    const intercept = (sumY - slope * sumX) / n;\r\n\r\n    // 生成回归线上的点\r\n    const xMin = Math.min(...xValues);\r\n    const xMax = Math.max(...xValues);\r\n    const regressionPoints = [\r\n      { x: xMin, y: slope * xMin + intercept },\r\n      { x: xMax, y: slope * xMax + intercept }\r\n    ];\r\n\r\n    return {\r\n      data: regressionPoints,\r\n      slope: slope,\r\n      intercept: intercept\r\n    };\r\n  };\r\n\r\n  // 生成随机颜色\r\n  const getRandomColor = (alpha = 1) => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n  };\r\n\r\n  // 下载当前图表为PNG\r\n  const downloadChart = (chartRef, fileName) => {\r\n    if (!chartRef.current) {\r\n      message.error('图表尚未加载完成');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // 获取图表的canvas元素\r\n      const canvas = chartRef.current.chartInstance.canvas;\r\n      \r\n      // 创建下载链接\r\n      const link = document.createElement('a');\r\n      link.download = `${fileName}.png`;\r\n      link.href = canvas.toDataURL('image/png');\r\n      link.click();\r\n      \r\n      message.success('图表下载成功');\r\n    } catch (error) {\r\n      console.error('下载图表时出错:', error);\r\n      message.error('下载图表失败');\r\n    }\r\n  };\r\n\r\n  // 下载图表为PDF (需要引入jsPDF库)\r\n  const downloadChartAsPDF = (chartRefs, fileName) => {\r\n    // 检查是否已加载jsPDF库\r\n    if (!window.jspdf) {\r\n      message.warning('PDF下载功能需要jsPDF库，请先引入');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const { jsPDF } = window.jspdf;\r\n      const doc = new jsPDF('landscape'); // 创建横向PDF\r\n      \r\n      chartRefs.forEach((chartRef, index) => {\r\n        if (chartRef.current) {\r\n          const canvas = chartRef.current.chartInstance.canvas;\r\n          const imgData = canvas.toDataURL('image/jpeg', 1.0);\r\n          \r\n          // 添加图片到PDF\r\n          if (index > 0) doc.addPage();\r\n          doc.addImage(imgData, 'JPEG', 10, 10, 280, 150);\r\n        }\r\n      });\r\n      \r\n      // 保存PDF\r\n      doc.save(`${fileName}.pdf`);\r\n      message.success('PDF下载成功');\r\n    } catch (error) {\r\n      console.error('下载PDF时出错:', error);\r\n      message.error('下载PDF失败');\r\n    }\r\n  };\r\n\r\n  // 处理鱼种选择\r\n  const handleSpeciesChange = (value) => {\r\n    setSelectedSpecies(value);\r\n  };\r\n\r\n  // 添加一个全局下载所有图表的按钮\r\n  const downloadAllCharts = () => {\r\n    const chartsToDownload = [];\r\n    \r\n    if (weightBarChartRef.current) chartsToDownload.push(weightBarChartRef);\r\n    if (generalScatterChartRef.current) chartsToDownload.push(generalScatterChartRef);\r\n    if (singleSpeciesChartRef.current) chartsToDownload.push(singleSpeciesChartRef);\r\n    \r\n    if (chartsToDownload.length === 0) {\r\n      message.error('没有可下载的图表');\r\n      return;\r\n    }\r\n    \r\n    downloadChartAsPDF(chartsToDownload, '鱼类数据可视化完整报告');\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 style={{\r\n          color: '#1890ff',\r\n          fontSize: '2rem',\r\n          fontWeight: '600'\r\n        }}>\r\n          鱼类数据可视化分析\r\n        </h1>\r\n        <Button \r\n          type=\"primary\" \r\n          icon={<DownloadOutlined />} \r\n          onClick={downloadAllCharts}\r\n        >\r\n          下载全部图表\r\n        </Button>\r\n      </div>\r\n\r\n      <Spin spinning={isLoading} tip=\"加载鱼类数据...\">\r\n        <div style={{ marginBottom: '30px', textAlign: 'center' }}>\r\n          <Select\r\n            value={selectedSpecies}\r\n            onChange={handleSpeciesChange}\r\n            style={{ width: '300px', height: '52px', fontSize: '16px' }}\r\n            placeholder=\"选择鱼种查看详细分析\"\r\n          >\r\n            <Option value=\"\">全部鱼类</Option>\r\n            {availableSpecies.map((species, index) => (\r\n              <Option key={index} value={species}>{species}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n\r\n        <Row gutter={16}>\r\n          <Col xs={24} md={12}>\r\n            {renderWeightBarChart()}\r\n          </Col>\r\n          <Col xs={24} md={12}>\r\n            {renderGeneralScatterChart()}\r\n          </Col>\r\n        </Row>\r\n\r\n        {selectedSpecies && renderSingleSpeciesScatterChart()}\r\n      </Spin>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FishDataVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
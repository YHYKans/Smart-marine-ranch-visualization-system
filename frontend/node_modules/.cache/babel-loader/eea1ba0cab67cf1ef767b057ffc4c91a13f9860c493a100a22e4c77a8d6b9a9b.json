{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u8F6F\\u4EF6\\u5DE5\\u7A0B\\\\\\u667A\\u6167\\u6D77\\u6D0B\\u7267\\u573A\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:3001';\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userInfo, setUserInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [redirectToLogin, setRedirectToLogin] = useState(false);\n\n  // 检查令牌是否即将过期\n  const isTokenExpiring = token => {\n    if (!token) return true;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const now = Date.now() / 1000;\n      return payload.exp - now < 300; // 5分钟内过期\n    } catch (err) {\n      return true;\n    }\n  };\n\n  // 刷新令牌\n  const refreshToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) return null;\n      const response = await fetch(`${API_BASE_URL}/api/refresh-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('刷新令牌失败');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('refreshToken', data.refreshToken);\n      return data.token;\n    } catch (error) {\n      console.error('刷新令牌失败:', error);\n      logout(true);\n      return null;\n    }\n  };\n\n  // API请求函数\n  const apiRequest = async (endpoint, method = 'GET', data = null) => {\n    let token = localStorage.getItem('token');\n\n    // 检查并刷新令牌\n    if (token && isTokenExpiring(token)) {\n      token = await refreshToken();\n    }\n    const config = {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : '' // 使用标准Authorization头\n      },\n      credentials: 'include'\n    };\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n\n      // 处理401未授权\n      if (response.status === 401) {\n        logout(true); // 传递true表示因过期登出\n        throw new Error('会话已过期，请重新登录');\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || '请求失败');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API请求错误:', error);\n      throw error;\n    }\n  };\n\n  // 组件挂载时检查认证状态\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n      const userStr = localStorage.getItem('user');\n      if (token && userStr) {\n        try {\n          // 验证令牌有效性\n          const result = await apiRequest('/api/verify-token');\n\n          // 确保isAdmin是布尔值\n          const storedUser = JSON.parse(userStr);\n          const normalizedUser = {\n            ...storedUser,\n            isAdmin: Boolean(storedUser.isAdmin)\n          };\n          setIsAuthenticated(true);\n          setUserInfo(normalizedUser);\n          localStorage.setItem('user', JSON.stringify(normalizedUser));\n        } catch (error) {\n          console.error('令牌验证失败:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n\n    // 添加定期会话检查\n    const sessionCheckInterval = setInterval(async () => {\n      if (isAuthenticated) {\n        try {\n          await apiRequest('/api/verify-token');\n        } catch (error) {\n          logout(true);\n        }\n      }\n    }, 5 * 60 * 1000); // 每5分钟检查一次\n\n    return () => clearInterval(sessionCheckInterval);\n  }, [isAuthenticated]);\n\n  // 登录方法\n  const login = async (username, password, isAdmin) => {\n    try {\n      const data = await apiRequest('/api/login', 'POST', {\n        username,\n        password,\n        isAdmin\n      });\n\n      // 保存令牌\n      if (data.token && data.refreshToken) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('refreshToken', data.refreshToken);\n      }\n\n      // 处理用户数据\n      const userData = {\n        ...data.user,\n        isAdmin: Boolean(data.user.isAdmin)\n      };\n      localStorage.setItem('user', JSON.stringify(userData));\n      setIsAuthenticated(true);\n      setUserInfo(userData);\n      setRedirectToLogin(false);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 登出方法\n  const logout = (expired = false) => {\n    try {\n      // 发送登出请求\n      fetch(`${API_BASE_URL}/api/logout`, {\n        method: 'POST',\n        credentials: 'include'\n      });\n    } catch (error) {\n      console.error('登出请求失败:', error);\n    } finally {\n      // 清除本地存储\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n\n      // 更新状态\n      setIsAuthenticated(false);\n      setUserInfo(null);\n\n      // 如果是过期登出，设置重定向标志\n      if (expired) {\n        setRedirectToLogin(true);\n      }\n    }\n  };\n\n  // 带认证的请求方法\n  const authFetch = async (url, options = {}) => {\n    let token = localStorage.getItem('token');\n\n    // 检查并刷新令牌\n    if (token && isTokenExpiring(token)) {\n      token = await refreshToken();\n    }\n    const config = {\n      method: options.method || 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : ''\n      },\n      credentials: 'include'\n    };\n    if (options.body) {\n      config.body = options.body;\n    }\n    try {\n      const fullUrl = url.startsWith('/') ? `${API_BASE_URL}${url}` : url;\n      const response = await fetch(fullUrl, config);\n\n      // 处理401未授权\n      if (response.status === 401) {\n        logout(true);\n        throw new Error('会话已过期，请重新登录');\n      }\n      return {\n        ok: response.ok,\n        status: response.status,\n        json: async () => {\n          const text = await response.text();\n          try {\n            return text ? JSON.parse(text) : {};\n          } catch (e) {\n            return {\n              message: text\n            };\n          }\n        }\n      };\n    } catch (error) {\n      console.error('authFetch错误:', error);\n      throw error;\n    }\n  };\n\n  // 注册方法\n  const register = async (username, email, password, isAdmin, adminCode) => {\n    try {\n      const userData = {\n        username,\n        email,\n        password,\n        isAdmin\n      };\n      if (isAdmin && adminCode) {\n        userData.adminCode = adminCode;\n      }\n      const data = await apiRequest('/api/register', 'POST', userData);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 提供给子组件的值\n  const value = {\n    isAuthenticated,\n    userInfo,\n    loading,\n    redirectToLogin,\n    login,\n    register,\n    logout,\n    authFetch,\n    refreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"JnIbuyyLMqPCtDXW4GdFh7SzGRk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","userInfo","setUserInfo","loading","setLoading","redirectToLogin","setRedirectToLogin","isTokenExpiring","token","payload","JSON","parse","atob","split","now","Date","exp","err","refreshToken","localStorage","getItem","response","fetch","method","headers","body","stringify","credentials","ok","Error","data","json","setItem","error","console","logout","apiRequest","endpoint","config","status","errorData","message","checkAuth","userStr","result","storedUser","normalizedUser","isAdmin","Boolean","sessionCheckInterval","setInterval","clearInterval","login","username","password","userData","user","expired","removeItem","authFetch","url","options","fullUrl","startsWith","text","e","register","email","adminCode","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/软件工程/智慧海洋牧场可视化系统/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001';\r\nconst AuthContext = createContext();\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [redirectToLogin, setRedirectToLogin] = useState(false);\r\n\r\n  // 检查令牌是否即将过期\r\n  const isTokenExpiring = (token) => {\r\n    if (!token) return true;\r\n    \r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      const now = Date.now() / 1000;\r\n      return payload.exp - now < 300; // 5分钟内过期\r\n    } catch (err) {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  // 刷新令牌\r\n  const refreshToken = async () => {\r\n    try {\r\n      const refreshToken = localStorage.getItem('refreshToken');\r\n      if (!refreshToken) return null;\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/api/refresh-token`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ refreshToken }),\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('刷新令牌失败');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('refreshToken', data.refreshToken);\r\n      return data.token;\r\n    } catch (error) {\r\n      console.error('刷新令牌失败:', error);\r\n      logout(true);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // API请求函数\r\n  const apiRequest = async (endpoint, method = 'GET', data = null) => {\r\n    let token = localStorage.getItem('token');\r\n    \r\n    // 检查并刷新令牌\r\n    if (token && isTokenExpiring(token)) {\r\n      token = await refreshToken();\r\n    }\r\n    \r\n    const config = {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token ? `Bearer ${token}` : '' // 使用标准Authorization头\r\n      },\r\n      credentials: 'include'\r\n    };\r\n\r\n    if (data) {\r\n      config.body = JSON.stringify(data);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n      \r\n      // 处理401未授权\r\n      if (response.status === 401) {\r\n        logout(true); // 传递true表示因过期登出\r\n        throw new Error('会话已过期，请重新登录');\r\n      }\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || '请求失败');\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API请求错误:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 组件挂载时检查认证状态\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const userStr = localStorage.getItem('user');\r\n      \r\n      if (token && userStr) {\r\n        try {\r\n          // 验证令牌有效性\r\n          const result = await apiRequest('/api/verify-token');\r\n          \r\n          // 确保isAdmin是布尔值\r\n          const storedUser = JSON.parse(userStr);\r\n          const normalizedUser = {\r\n            ...storedUser,\r\n            isAdmin: Boolean(storedUser.isAdmin)\r\n          };\r\n          \r\n          setIsAuthenticated(true);\r\n          setUserInfo(normalizedUser);\r\n          localStorage.setItem('user', JSON.stringify(normalizedUser));\r\n          \r\n        } catch (error) {\r\n          console.error('令牌验证失败:', error);\r\n          logout();\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n    \r\n    checkAuth();\r\n    \r\n    // 添加定期会话检查\r\n    const sessionCheckInterval = setInterval(async () => {\r\n      if (isAuthenticated) {\r\n        try {\r\n          await apiRequest('/api/verify-token');\r\n        } catch (error) {\r\n          logout(true);\r\n        }\r\n      }\r\n    }, 5 * 60 * 1000); // 每5分钟检查一次\r\n    \r\n    return () => clearInterval(sessionCheckInterval);\r\n  }, [isAuthenticated]);\r\n\r\n  // 登录方法\r\n  const login = async (username, password, isAdmin) => {\r\n    try {\r\n      const data = await apiRequest('/api/login', 'POST', { \r\n        username, \r\n        password, \r\n        isAdmin \r\n      });\r\n      \r\n      // 保存令牌\r\n      if (data.token && data.refreshToken) {\r\n        localStorage.setItem('token', data.token);\r\n        localStorage.setItem('refreshToken', data.refreshToken);\r\n      }\r\n      \r\n      // 处理用户数据\r\n      const userData = {\r\n        ...data.user,\r\n        isAdmin: Boolean(data.user.isAdmin)\r\n      };\r\n      \r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setIsAuthenticated(true);\r\n      setUserInfo(userData);\r\n      setRedirectToLogin(false);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 登出方法\r\n  const logout = (expired = false) => {\r\n    try {\r\n      // 发送登出请求\r\n      fetch(`${API_BASE_URL}/api/logout`, {\r\n        method: 'POST',\r\n        credentials: 'include'\r\n      });\r\n    } catch (error) {\r\n      console.error('登出请求失败:', error);\r\n    } finally {\r\n      // 清除本地存储\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('refreshToken');\r\n      localStorage.removeItem('user');\r\n      \r\n      // 更新状态\r\n      setIsAuthenticated(false);\r\n      setUserInfo(null);\r\n      \r\n      // 如果是过期登出，设置重定向标志\r\n      if (expired) {\r\n        setRedirectToLogin(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 带认证的请求方法\r\n  const authFetch = async (url, options = {}) => {\r\n    let token = localStorage.getItem('token');\r\n    \r\n    // 检查并刷新令牌\r\n    if (token && isTokenExpiring(token)) {\r\n      token = await refreshToken();\r\n    }\r\n    \r\n    const config = {\r\n      method: options.method || 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token ? `Bearer ${token}` : ''\r\n      },\r\n      credentials: 'include'\r\n    };\r\n\r\n    if (options.body) {\r\n      config.body = options.body;\r\n    }\r\n\r\n    try {\r\n      const fullUrl = url.startsWith('/') ? `${API_BASE_URL}${url}` : url;\r\n      const response = await fetch(fullUrl, config);\r\n      \r\n      // 处理401未授权\r\n      if (response.status === 401) {\r\n        logout(true);\r\n        throw new Error('会话已过期，请重新登录');\r\n      }\r\n      \r\n      return {\r\n        ok: response.ok,\r\n        status: response.status,\r\n        json: async () => {\r\n          const text = await response.text();\r\n          try {\r\n            return text ? JSON.parse(text) : {};\r\n          } catch (e) {\r\n            return { message: text };\r\n          }\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('authFetch错误:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 注册方法\r\n  const register = async (username, email, password, isAdmin, adminCode) => {\r\n    try {\r\n      const userData = { username, email, password, isAdmin };\r\n      \r\n      if (isAdmin && adminCode) {\r\n        userData.adminCode = adminCode;\r\n      }\r\n      \r\n      const data = await apiRequest('/api/register', 'POST', userData);\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 提供给子组件的值\r\n  const value = {\r\n    isAuthenticated,\r\n    userInfo,\r\n    loading,\r\n    redirectToLogin,\r\n    login,\r\n    register,\r\n    logout,\r\n    authFetch,\r\n    refreshToken\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
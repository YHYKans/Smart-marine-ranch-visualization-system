{"ast":null,"code":"var _jsxFileName = \"D:\\\\SoftwareProject\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// 定义API基础URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:3001';\n\n// 创建认证上下文\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 自定义 Hook，用于在组件中访问认证上下文\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n/**\r\n * AuthProvider 组件 - 认证状态管理提供者\r\n */\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  // 认证状态\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  // 用户信息\n  const [userInfo, setUserInfo] = useState(null);\n  // 加载状态\n  const [loading, setLoading] = useState(true);\n\n  /**\r\n   * 自定义API请求函数 - 处理所有HTTP请求\r\n   */\n  const apiRequest = async (endpoint, method = 'GET', data = null) => {\n    console.log(`发送请求到: ${API_BASE_URL}${endpoint}`);\n    const config = {\n      method,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    };\n\n    // 添加认证令牌（如果存在）\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['x-auth-token'] = token;\n    }\n\n    // 添加请求体（如果有）\n    if (data) {\n      config.body = JSON.stringify(data);\n      console.log('请求数据:', data);\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n      console.log(`收到响应: 状态码 ${response.status}`);\n\n      // 处理响应内容\n      const text = await response.text();\n      console.log(`响应文本: ${text.substring(0, 150)}...`);\n      let result;\n      try {\n        result = text ? JSON.parse(text) : {};\n        console.log('解析后的响应数据:', result);\n      } catch (e) {\n        console.error('响应解析错误:', e);\n        console.error('原始响应:', text);\n        throw new Error(`无法解析响应: ${text.substring(0, 100)}...`);\n      }\n      if (!response.ok) {\n        throw new Error(result.message || '请求失败');\n      }\n      return result;\n    } catch (error) {\n      console.error('API请求错误:', error);\n      throw error;\n    }\n  };\n\n  /**\r\n   * 组件挂载时检查本地存储的认证信息\r\n   */\n  useEffect(() => {\n    const checkAuth = async () => {\n      // 从本地存储获取 token 和用户信息\n      const token = localStorage.getItem('token');\n      const userStr = localStorage.getItem('user');\n      if (token && userStr) {\n        try {\n          // 验证 token 是否仍然有效\n          const result = await apiRequest('/api/user');\n\n          // 解析存储的用户信息\n          const storedUser = JSON.parse(userStr);\n          console.log('存储的用户信息:', storedUser);\n\n          // 确保isAdmin是布尔值\n          const normalizedUser = {\n            ...storedUser,\n            isAdmin: Boolean(storedUser.isAdmin)\n          };\n\n          // token 有效，恢复登录状态\n          setIsAuthenticated(true);\n          setUserInfo(normalizedUser);\n\n          // 更新本地存储中的用户信息（确保isAdmin是布尔值）\n          localStorage.setItem('user', JSON.stringify(normalizedUser));\n        } catch (error) {\n          console.error('验证令牌时出错:', error);\n          // 发生错误时清除本地存储\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n        }\n      }\n\n      // 检查完成，设置 loading 为 false\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  /**\r\n   * 登录方法\r\n   */\n  const login = async (username, password, isAdmin) => {\n    try {\n      const data = await apiRequest('/api/login', 'POST', {\n        username,\n        password,\n        isAdmin\n      });\n      console.log('登录响应:', data);\n\n      // 确保用户信息中的isAdmin是布尔值\n      const userData = {\n        ...data.user,\n        isAdmin: Boolean(data.user.isAdmin)\n      };\n      console.log('处理后的用户数据:', userData);\n\n      // 保存 token 到本地存储\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n      }\n\n      // 保存用户信息到本地存储\n      localStorage.setItem('user', JSON.stringify(userData));\n\n      // 更新认证状态\n      setIsAuthenticated(true);\n      setUserInfo(userData);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  /**\r\n   * 注册方法\r\n   */\n  const register = async (username, email, password, isAdmin, adminCode) => {\n    try {\n      // 构建注册数据\n      const userData = {\n        username,\n        email,\n        password,\n        isAdmin\n      };\n\n      // 如果是管理员注册，添加管理员代码\n      if (isAdmin && adminCode) {\n        userData.adminCode = adminCode;\n      }\n\n      // 发送注册请求\n      const data = await apiRequest('/api/register', 'POST', userData);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  /**\r\n   * 登出方法\r\n   */\n  const logout = async () => {\n    try {\n      const token = localStorage.getItem('token');\n\n      // 如果有 token，向服务器发送登出请求\n      if (token) {\n        await apiRequest('/api/logout', 'POST');\n      }\n    } catch (error) {\n      console.error('登出请求失败:', error);\n    } finally {\n      // 无论请求是否成功，都清除本地认证信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      setIsAuthenticated(false);\n      setUserInfo(null);\n    }\n  };\n\n  /**\r\n   * 带认证的请求方法\r\n   */\n  const authFetch = async (url, options = {}) => {\n    try {\n      // 将相对URL转为绝对URL\n      const fullUrl = url.startsWith('/') ? `${API_BASE_URL}${url}` : url;\n\n      // 使用apiRequest处理请求\n      const response = await apiRequest(url, options.method || 'GET', options.body ? JSON.parse(options.body) : null);\n\n      // 模拟fetch API的响应格式\n      return {\n        ok: true,\n        json: () => Promise.resolve(response)\n      };\n    } catch (error) {\n      if (error.message === '会话已过期，请重新登录') {\n        logout();\n      }\n      return {\n        ok: false,\n        json: () => Promise.resolve({\n          message: error.message\n        })\n      };\n    }\n  };\n\n  // 提供给子组件的值\n  const value = {\n    isAuthenticated,\n    userInfo,\n    loading,\n    login,\n    register,\n    logout,\n    authFetch\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"pbXGSZ+SUQjZXIYHquUWAeGf1f8=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","userInfo","setUserInfo","loading","setLoading","apiRequest","endpoint","method","data","console","log","config","headers","credentials","token","localStorage","getItem","body","JSON","stringify","response","fetch","status","text","substring","result","parse","e","error","Error","ok","message","checkAuth","userStr","storedUser","normalizedUser","isAdmin","Boolean","setItem","removeItem","login","username","password","userData","user","register","email","adminCode","logout","authFetch","url","options","fullUrl","startsWith","json","Promise","resolve","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/SoftwareProject/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// 定义API基础URL\r\nconst API_BASE_URL = 'http://localhost:3001';\r\n\r\n// 创建认证上下文\r\nconst AuthContext = createContext();\r\n\r\n// 自定义 Hook，用于在组件中访问认证上下文\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n/**\r\n * AuthProvider 组件 - 认证状态管理提供者\r\n */\r\nexport const AuthProvider = ({ children }) => {\r\n  // 认证状态\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  // 用户信息\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  // 加载状态\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  /**\r\n   * 自定义API请求函数 - 处理所有HTTP请求\r\n   */\r\n  const apiRequest = async (endpoint, method = 'GET', data = null) => {\r\n    console.log(`发送请求到: ${API_BASE_URL}${endpoint}`);\r\n    \r\n    const config = {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'include'\r\n    };\r\n\r\n    // 添加认证令牌（如果存在）\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['x-auth-token'] = token;\r\n    }\r\n\r\n    // 添加请求体（如果有）\r\n    if (data) {\r\n      config.body = JSON.stringify(data);\r\n      console.log('请求数据:', data);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n      console.log(`收到响应: 状态码 ${response.status}`);\r\n      \r\n      // 处理响应内容\r\n      const text = await response.text();\r\n      console.log(`响应文本: ${text.substring(0, 150)}...`);\r\n      \r\n      let result;\r\n      try {\r\n        result = text ? JSON.parse(text) : {};\r\n        console.log('解析后的响应数据:', result);\r\n      } catch (e) {\r\n        console.error('响应解析错误:', e);\r\n        console.error('原始响应:', text);\r\n        throw new Error(`无法解析响应: ${text.substring(0, 100)}...`);\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(result.message || '请求失败');\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error('API请求错误:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 组件挂载时检查本地存储的认证信息\r\n   */\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      // 从本地存储获取 token 和用户信息\r\n      const token = localStorage.getItem('token');\r\n      const userStr = localStorage.getItem('user');\r\n      \r\n      if (token && userStr) {\r\n        try {\r\n          // 验证 token 是否仍然有效\r\n          const result = await apiRequest('/api/user');\r\n          \r\n          // 解析存储的用户信息\r\n          const storedUser = JSON.parse(userStr);\r\n          console.log('存储的用户信息:', storedUser);\r\n          \r\n          // 确保isAdmin是布尔值\r\n          const normalizedUser = {\r\n            ...storedUser,\r\n            isAdmin: Boolean(storedUser.isAdmin)\r\n          };\r\n          \r\n          // token 有效，恢复登录状态\r\n          setIsAuthenticated(true);\r\n          setUserInfo(normalizedUser);\r\n          \r\n          // 更新本地存储中的用户信息（确保isAdmin是布尔值）\r\n          localStorage.setItem('user', JSON.stringify(normalizedUser));\r\n          \r\n        } catch (error) {\r\n          console.error('验证令牌时出错:', error);\r\n          // 发生错误时清除本地存储\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n        }\r\n      }\r\n      \r\n      // 检查完成，设置 loading 为 false\r\n      setLoading(false);\r\n    };\r\n    \r\n    checkAuth();\r\n  }, []);\r\n\r\n  /**\r\n   * 登录方法\r\n   */\r\n  const login = async (username, password, isAdmin) => {\r\n    try {\r\n      const data = await apiRequest('/api/login', 'POST', { \r\n        username, \r\n        password, \r\n        isAdmin \r\n      });\r\n      \r\n      console.log('登录响应:', data);\r\n      \r\n      // 确保用户信息中的isAdmin是布尔值\r\n      const userData = {\r\n        ...data.user,\r\n        isAdmin: Boolean(data.user.isAdmin)\r\n      };\r\n      \r\n      console.log('处理后的用户数据:', userData);\r\n      \r\n      // 保存 token 到本地存储\r\n      if (data.token) {\r\n        localStorage.setItem('token', data.token);\r\n      }\r\n      \r\n      // 保存用户信息到本地存储\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      \r\n      // 更新认证状态\r\n      setIsAuthenticated(true);\r\n      setUserInfo(userData);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 注册方法\r\n   */\r\n  const register = async (username, email, password, isAdmin, adminCode) => {\r\n    try {\r\n      // 构建注册数据\r\n      const userData = { username, email, password, isAdmin };\r\n      \r\n      // 如果是管理员注册，添加管理员代码\r\n      if (isAdmin && adminCode) {\r\n        userData.adminCode = adminCode;\r\n      }\r\n      \r\n      // 发送注册请求\r\n      const data = await apiRequest('/api/register', 'POST', userData);\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 登出方法\r\n   */\r\n  const logout = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      // 如果有 token，向服务器发送登出请求\r\n      if (token) {\r\n        await apiRequest('/api/logout', 'POST');\r\n      }\r\n    } catch (error) {\r\n      console.error('登出请求失败:', error);\r\n    } finally {\r\n      // 无论请求是否成功，都清除本地认证信息\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      setIsAuthenticated(false);\r\n      setUserInfo(null);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 带认证的请求方法\r\n   */\r\n  const authFetch = async (url, options = {}) => {\r\n    try {\r\n      // 将相对URL转为绝对URL\r\n      const fullUrl = url.startsWith('/') \r\n        ? `${API_BASE_URL}${url}` \r\n        : url;\r\n      \r\n      // 使用apiRequest处理请求\r\n      const response = await apiRequest(url, options.method || 'GET', options.body ? JSON.parse(options.body) : null);\r\n      \r\n      // 模拟fetch API的响应格式\r\n      return {\r\n        ok: true,\r\n        json: () => Promise.resolve(response)\r\n      };\r\n    } catch (error) {\r\n      if (error.message === '会话已过期，请重新登录') {\r\n        logout();\r\n      }\r\n      return {\r\n        ok: false,\r\n        json: () => Promise.resolve({ message: error.message })\r\n      };\r\n    }\r\n  };\r\n\r\n  // 提供给子组件的值\r\n  const value = {\r\n    isAuthenticated,\r\n    userInfo,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    authFetch\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
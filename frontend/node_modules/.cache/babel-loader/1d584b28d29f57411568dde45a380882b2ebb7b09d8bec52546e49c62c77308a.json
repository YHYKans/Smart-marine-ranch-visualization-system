{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u8F6F\\u4EF6\\u5DE5\\u7A0B\\\\\\u667A\\u6167\\u6D77\\u6D0B\\u7267\\u573A\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\\\\frontend\\\\src\\\\pages\\\\FishVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Card, Row, Col, Select, Spin, message, Button } from 'antd';\nimport { Bar, Scatter } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { DownloadOutlined } from '@ant-design/icons';\n\n// 导入 Select.Option\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nfunction FishDataVisualization() {\n  _s();\n  const [fishData, setFishData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedSpecies, setSelectedSpecies] = useState('');\n  const [availableSpecies, setAvailableSpecies] = useState([]);\n  const barChartRef = useRef(null);\n  const generalScatterRef = useRef(null);\n  const singleSpeciesRef = useRef(null);\n  const [chartLoaded, setChartLoaded] = useState({\n    bar: false,\n    generalScatter: false,\n    singleSpecies: false\n  });\n\n  // 从后端获取鱼类数据\n  useEffect(() => {\n    fetchFishData();\n  }, [selectedSpecies]);\n\n  // 下载图表为图片\n  const downloadChartAsImage = useCallback((chartRef, chartName, chartType) => {\n    console.log('下载按钮被点击，图表类型:', chartType);\n    if (!chartRef.current) {\n      message.warning('图表尚未加载完成');\n      return;\n    }\n\n    // 使用 setTimeout 确保图表完全渲染\n    setTimeout(() => {\n      try {\n        // 尝试通过不同方式获取图表实例\n        let chartInstance;\n\n        // 方式 1: 直接访问 chartInstance 属性\n        if (chartRef.current.chartInstance) {\n          chartInstance = chartRef.current.chartInstance;\n        }\n        // 方式 2: 使用 getElementAtEvent (如果是 react-chartjs-2 的旧版本)\n        else if (chartRef.current.chart) {\n          chartInstance = chartRef.current.chart;\n        }\n        // 方式 3: 通过 canvas 元素获取\n        else if (chartRef.current.canvas) {\n          const canvas = chartRef.current.canvas;\n          chartInstance = Chart.getChart(canvas);\n        }\n        if (!chartInstance) {\n          console.error('无法获取图表实例', chartType);\n          message.warning({\n            content: '图表加载中，请稍后再试',\n            key: 'chart-not-ready',\n            duration: 2\n          });\n          return;\n        }\n\n        // 生成图片并下载\n        const imgData = chartInstance.toBase64Image('image/png', 1.0);\n        const link = document.createElement('a');\n        link.download = `${chartName}.png`;\n        link.href = imgData;\n        link.click();\n        message.success({\n          content: `${chartName} 下载成功`,\n          key: `download-success-${chartType}`,\n          duration: 2\n        });\n      } catch (error) {\n        console.error('下载图表失败:', error);\n        message.error({\n          content: '下载图表失败，请重试',\n          key: `download-error-${chartType}`,\n          duration: 3\n        });\n      }\n    }, 300); // 延迟 300ms 确保图表渲染完成\n  }, []);\n\n  // 渲染平均重量柱状图\n  const renderWeightBarChart = () => {\n    if (!fishData || !fishData.bar_chart_data) return null;\n    const {\n      bar_chart_data\n    } = fishData;\n    const labels = bar_chart_data.map(item => item.Species);\n    const values = bar_chart_data.map(item => item['Weight(g)']);\n    return /*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u6BCF\\u79CD\\u9C7C\\u7C7B\\u7684\\u5E73\\u5747\\u91CD\\u91CF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this),\n          size: \"small\",\n          onClick: () => downloadChartAsImage(barChartRef, '鱼类平均重量柱状图', 'bar'),\n          disabled: !chartLoaded.bar,\n          children: \"\\u4E0B\\u8F7D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this),\n      bordered: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '350px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Bar, {\n          ref: barChartRef,\n          data: {\n            labels: labels,\n            datasets: [{\n              label: '平均重量 (g)',\n              data: values,\n              backgroundColor: ['rgba(54, 162, 235, 0.7)', 'rgba(255, 99, 132, 0.7)', 'rgba(255, 206, 86, 0.7)', 'rgba(75, 192, 192, 0.7)', 'rgba(153, 102, 255, 0.7)', 'rgba(255, 159, 64, 0.7)', 'rgba(173, 216, 230, 0.7)'],\n              borderColor: ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 206, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(255, 159, 64)', 'rgb(173, 216, 230)'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top'\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                title: {\n                  display: true,\n                  text: '平均重量 (g)'\n                }\n              }\n            }\n          },\n          onRender: chart => {\n            console.log('柱状图渲染完成');\n            setChartLoaded(prev => ({\n              ...prev,\n              bar: true\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 渲染所有鱼类长度和宽度关系散点图\n  const renderGeneralScatterChart = () => {\n    if (!fishData || !fishData.scatter_chart_data) return null;\n\n    // 按鱼种分组数据\n    const speciesGroups = {};\n    fishData.scatter_chart_data.forEach(item => {\n      if (!speciesGroups[item.Species]) {\n        speciesGroups[item.Species] = [];\n      }\n      speciesGroups[item.Species].push({\n        x: item['Length1(cm)'],\n        y: item['Width(cm)']\n      });\n    });\n\n    // 为每个鱼种创建数据集\n    const datasets = Object.keys(speciesGroups).map(species => ({\n      label: species,\n      data: speciesGroups[species],\n      backgroundColor: getRandomColor(0.7),\n      borderColor: getRandomColor(),\n      borderWidth: 1,\n      pointRadius: 4,\n      pointHoverRadius: 6\n    }));\n    return /*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u9C7C\\u7C7B\\u7684\\u957F\\u5EA6\\u548C\\u5BBD\\u5EA6\\u5173\\u7CFB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 21\n          }, this),\n          size: \"small\",\n          onClick: () => downloadChartAsImage(generalScatterRef, '鱼类长度和宽度关系散点图', 'generalScatter'),\n          disabled: !chartLoaded.generalScatter,\n          children: \"\\u4E0B\\u8F7D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this),\n      bordered: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '350px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Scatter, {\n          ref: generalScatterRef,\n          data: {\n            datasets: datasets\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    const point = context.parsed;\n                    return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\n                  }\n                }\n              }\n            },\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                title: {\n                  display: true,\n                  text: '长度 (cm)'\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: '宽度 (cm)'\n                }\n              }\n            }\n          },\n          onRender: chart => {\n            console.log('通用散点图渲染完成');\n            setChartLoaded(prev => ({\n              ...prev,\n              generalScatter: true\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 渲染特定鱼种的散点图（带回归线）\n  const renderSingleSpeciesScatterChart = () => {\n    if (!fishData || !fishData.single_species_data) return null;\n    const {\n      single_species_data\n    } = fishData;\n    const {\n      species,\n      data,\n      stats\n    } = single_species_data;\n\n    // 准备散点数据\n    const scatterData = data.map(item => ({\n      x: item['Length1(cm)'],\n      y: item['Width(cm)']\n    }));\n\n    // 计算回归线数据\n    const regressionLine = calculateRegressionLine(scatterData);\n    return /*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: `${species} 的长度和宽度关系 (相关系数: ${stats.correlation.toFixed(2)})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          icon: /*#__PURE__*/_jsxDEV(DownloadOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 21\n          }, this),\n          size: \"small\",\n          onClick: () => downloadChartAsImage(singleSpeciesRef, `${species}长度和宽度关系分析图`, 'singleSpecies'),\n          disabled: !chartLoaded.singleSpecies,\n          children: \"\\u4E0B\\u8F7D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this),\n      borderColor: \"#1890ff\",\n      style: {\n        borderWidth: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '350px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Scatter, {\n          ref: singleSpeciesRef,\n          data: {\n            datasets: [{\n              label: `${species} 样本点`,\n              data: scatterData,\n              backgroundColor: 'rgba(30, 144, 255, 0.5)',\n              borderColor: 'rgba(30, 144, 255, 1)',\n              borderWidth: 1,\n              pointRadius: 4,\n              pointHoverRadius: 6\n            }, {\n              label: '回归线',\n              data: regressionLine,\n              backgroundColor: 'rgba(220, 20, 60, 0)',\n              borderColor: 'rgba(220, 20, 60, 1)',\n              borderWidth: 2,\n              pointRadius: 0,\n              showLine: true,\n              fill: false\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    if (context.dataset.label === '回归线') {\n                      return [`回归线: y = ${regressionLine.slope.toFixed(4)}x + ${regressionLine.intercept.toFixed(4)}`];\n                    }\n                    const point = context.parsed;\n                    return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\n                  }\n                }\n              }\n            },\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                title: {\n                  display: true,\n                  text: '长度 (cm)'\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: '宽度 (cm)'\n                }\n              }\n            }\n          },\n          onRender: chart => {\n            console.log('特定鱼种散点图渲染完成');\n            setChartLoaded(prev => ({\n              ...prev,\n              singleSpecies: true\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '10px',\n          backgroundColor: '#f5f7fa',\n          borderRadius: '4px',\n          marginTop: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u6837\\u672C\\u6570\\u91CF: \", stats.sample_size, \" | \\u5E73\\u5747\\u957F\\u5EA6: \", stats.avg_length.toFixed(2), \" cm | \\u5E73\\u5747\\u5BBD\\u5EA6: \", stats.avg_width.toFixed(2), \" cm\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 计算回归线\n  const calculateRegressionLine = dataPoints => {\n    const xValues = dataPoints.map(p => p.x);\n    const yValues = dataPoints.map(p => p.y);\n    const n = xValues.length;\n    let sumX = 0,\n      sumY = 0,\n      sumXY = 0,\n      sumX2 = 0;\n    for (let i = 0; i < n; i++) {\n      sumX += xValues[i];\n      sumY += yValues[i];\n      sumXY += xValues[i] * yValues[i];\n      sumX2 += xValues[i] * xValues[i];\n    }\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n\n    // 生成回归线上的点\n    const xMin = Math.min(...xValues);\n    const xMax = Math.max(...xValues);\n    const regressionPoints = [{\n      x: xMin,\n      y: slope * xMin + intercept\n    }, {\n      x: xMax,\n      y: slope * xMax + intercept\n    }];\n    return {\n      data: regressionPoints,\n      slope: slope,\n      intercept: intercept\n    };\n  };\n\n  // 生成随机颜色\n  const getRandomColor = (alpha = 1) => {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  };\n\n  // 处理鱼种选择\n  const handleSpeciesChange = value => {\n    // 重置图表加载状态\n    setChartLoaded({\n      bar: false,\n      generalScatter: false,\n      singleSpecies: false\n    });\n    setSelectedSpecies(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center',\n        color: '#1890ff',\n        marginBottom: '30px',\n        fontSize: '2rem',\n        fontWeight: '600'\n      },\n      children: \"\\u9C7C\\u7C7B\\u6570\\u636E\\u53EF\\u89C6\\u5316\\u5206\\u6790\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Spin, {\n      spinning: isLoading,\n      tip: \"\\u52A0\\u8F7D\\u9C7C\\u7C7B\\u6570\\u636E...\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '30px',\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          value: selectedSpecies,\n          onChange: handleSpeciesChange,\n          style: {\n            width: '300px',\n            height: '52px',\n            fontSize: '16px'\n          },\n          placeholder: \"\\u9009\\u62E9\\u9C7C\\u79CD\\u67E5\\u770B\\u8BE6\\u7EC6\\u5206\\u6790\",\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: \"\",\n            children: \"\\u5168\\u90E8\\u9C7C\\u7C7B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), availableSpecies.map((species, index) => /*#__PURE__*/_jsxDEV(Option, {\n            value: species,\n            children: species\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        gutter: 16,\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 24,\n          md: 12,\n          children: renderWeightBarChart()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 24,\n          md: 12,\n          children: renderGeneralScatterChart()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), selectedSpecies && renderSingleSpeciesScatterChart()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n}\n_s(FishDataVisualization, \"SNEuad0c2QpQpwZ97FF1zpSvfP8=\");\n_c = FishDataVisualization;\nexport default FishDataVisualization;\nvar _c;\n$RefreshReg$(_c, \"FishDataVisualization\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Card","Row","Col","Select","Spin","message","Button","Bar","Scatter","Chart","DownloadOutlined","jsxDEV","_jsxDEV","Option","FishDataVisualization","_s","fishData","setFishData","isLoading","setIsLoading","selectedSpecies","setSelectedSpecies","availableSpecies","setAvailableSpecies","barChartRef","generalScatterRef","singleSpeciesRef","chartLoaded","setChartLoaded","bar","generalScatter","singleSpecies","fetchFishData","downloadChartAsImage","chartRef","chartName","chartType","console","log","current","warning","setTimeout","chartInstance","chart","canvas","getChart","error","content","key","duration","imgData","toBase64Image","link","document","createElement","download","href","click","success","renderWeightBarChart","bar_chart_data","labels","map","item","Species","values","title","style","display","justifyContent","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","icon","size","onClick","disabled","bordered","height","ref","data","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","scales","y","beginAtZero","text","onRender","prev","renderGeneralScatterChart","scatter_chart_data","speciesGroups","forEach","push","x","Object","keys","species","getRandomColor","pointRadius","pointHoverRadius","tooltip","callbacks","context","point","parsed","type","renderSingleSpeciesScatterChart","single_species_data","stats","scatterData","regressionLine","calculateRegressionLine","correlation","toFixed","showLine","fill","dataset","slope","intercept","padding","borderRadius","marginTop","sample_size","avg_length","avg_width","dataPoints","xValues","p","yValues","n","length","sumX","sumY","sumXY","sumX2","i","xMin","Math","min","xMax","max","regressionPoints","alpha","r","floor","random","g","b","handleSpeciesChange","value","textAlign","color","marginBottom","fontSize","fontWeight","spinning","tip","onChange","width","placeholder","index","gutter","xs","md","_c","$RefreshReg$"],"sources":["D:/软件工程/智慧海洋牧场可视化系统/frontend/src/pages/FishVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { Card, Row, Col, Select, Spin, message, Button } from 'antd';\r\nimport { Bar, Scatter } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\n\r\n// 导入 Select.Option\r\nconst { Option } = Select;\r\n\r\nfunction FishDataVisualization() {\r\n  const [fishData, setFishData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedSpecies, setSelectedSpecies] = useState('');\r\n  const [availableSpecies, setAvailableSpecies] = useState([]);\r\n  const barChartRef = useRef(null);\r\n  const generalScatterRef = useRef(null);\r\n  const singleSpeciesRef = useRef(null);\r\n  const [chartLoaded, setChartLoaded] = useState({\r\n    bar: false,\r\n    generalScatter: false,\r\n    singleSpecies: false\r\n  });\r\n\r\n  // 从后端获取鱼类数据\r\n  useEffect(() => {\r\n    fetchFishData();\r\n  }, [selectedSpecies]);\r\n\r\n  // 下载图表为图片\r\n  const downloadChartAsImage = useCallback((chartRef, chartName, chartType) => {\r\n    console.log('下载按钮被点击，图表类型:', chartType);\r\n    \r\n    if (!chartRef.current) {\r\n      message.warning('图表尚未加载完成');\r\n      return;\r\n    }\r\n    \r\n    // 使用 setTimeout 确保图表完全渲染\r\n    setTimeout(() => {\r\n      try {\r\n        // 尝试通过不同方式获取图表实例\r\n        let chartInstance;\r\n        \r\n        // 方式 1: 直接访问 chartInstance 属性\r\n        if (chartRef.current.chartInstance) {\r\n          chartInstance = chartRef.current.chartInstance;\r\n        }\r\n        // 方式 2: 使用 getElementAtEvent (如果是 react-chartjs-2 的旧版本)\r\n        else if (chartRef.current.chart) {\r\n          chartInstance = chartRef.current.chart;\r\n        }\r\n        // 方式 3: 通过 canvas 元素获取\r\n        else if (chartRef.current.canvas) {\r\n          const canvas = chartRef.current.canvas;\r\n          chartInstance = Chart.getChart(canvas);\r\n        }\r\n        \r\n        if (!chartInstance) {\r\n          console.error('无法获取图表实例', chartType);\r\n          message.warning({\r\n            content: '图表加载中，请稍后再试',\r\n            key: 'chart-not-ready',\r\n            duration: 2\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 生成图片并下载\r\n        const imgData = chartInstance.toBase64Image('image/png', 1.0);\r\n        const link = document.createElement('a');\r\n        link.download = `${chartName}.png`;\r\n        link.href = imgData;\r\n        link.click();\r\n        \r\n        message.success({\r\n          content: `${chartName} 下载成功`,\r\n          key: `download-success-${chartType}`,\r\n          duration: 2\r\n        });\r\n      } catch (error) {\r\n        console.error('下载图表失败:', error);\r\n        message.error({\r\n          content: '下载图表失败，请重试',\r\n          key: `download-error-${chartType}`,\r\n          duration: 3\r\n        });\r\n      }\r\n    }, 300); // 延迟 300ms 确保图表渲染完成\r\n  }, []);\r\n\r\n  // 渲染平均重量柱状图\r\n  const renderWeightBarChart = () => {\r\n    if (!fishData || !fishData.bar_chart_data) return null;\r\n\r\n    const { bar_chart_data } = fishData;\r\n    const labels = bar_chart_data.map(item => item.Species);\r\n    const values = bar_chart_data.map(item => item['Weight(g)']);\r\n\r\n    return (\r\n      <Card \r\n        title={\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>每种鱼类的平均重量</span>\r\n            <Button \r\n              icon={<DownloadOutlined />} \r\n              size=\"small\"\r\n              onClick={() => downloadChartAsImage(barChartRef, '鱼类平均重量柱状图', 'bar')}\r\n              disabled={!chartLoaded.bar}\r\n            >\r\n              下载\r\n            </Button>\r\n          </div>\r\n        } \r\n        bordered={true}\r\n      >\r\n        <div style={{ height: '350px' }}>\r\n          <Bar\r\n            ref={barChartRef}\r\n            data={{\r\n              labels: labels,\r\n              datasets: [{\r\n                label: '平均重量 (g)',\r\n                data: values,\r\n                backgroundColor: [\r\n                  'rgba(54, 162, 235, 0.7)',\r\n                  'rgba(255, 99, 132, 0.7)',\r\n                  'rgba(255, 206, 86, 0.7)',\r\n                  'rgba(75, 192, 192, 0.7)',\r\n                  'rgba(153, 102, 255, 0.7)',\r\n                  'rgba(255, 159, 64, 0.7)',\r\n                  'rgba(173, 216, 230, 0.7)'\r\n                ],\r\n                borderColor: [\r\n                  'rgb(54, 162, 235)',\r\n                  'rgb(255, 99, 132)',\r\n                  'rgb(255, 206, 86)',\r\n                  'rgb(75, 192, 192)',\r\n                  'rgb(153, 102, 255)',\r\n                  'rgb(255, 159, 64)',\r\n                  'rgb(173, 216, 230)'\r\n                ],\r\n                borderWidth: 1\r\n              }]\r\n            }}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                }\r\n              },\r\n              scales: {\r\n                y: {\r\n                  beginAtZero: true,\r\n                  title: {\r\n                    display: true,\r\n                    text: '平均重量 (g)'\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n            onRender={(chart) => {\r\n              console.log('柱状图渲染完成');\r\n              setChartLoaded(prev => ({ ...prev, bar: true }));\r\n            }}\r\n          />\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // 渲染所有鱼类长度和宽度关系散点图\r\n  const renderGeneralScatterChart = () => {\r\n    if (!fishData || !fishData.scatter_chart_data) return null;\r\n\r\n    // 按鱼种分组数据\r\n    const speciesGroups = {};\r\n    fishData.scatter_chart_data.forEach(item => {\r\n      if (!speciesGroups[item.Species]) {\r\n        speciesGroups[item.Species] = [];\r\n      }\r\n      speciesGroups[item.Species].push({\r\n        x: item['Length1(cm)'],\r\n        y: item['Width(cm)']\r\n      });\r\n    });\r\n\r\n    // 为每个鱼种创建数据集\r\n    const datasets = Object.keys(speciesGroups).map(species => ({\r\n      label: species,\r\n      data: speciesGroups[species],\r\n      backgroundColor: getRandomColor(0.7),\r\n      borderColor: getRandomColor(),\r\n      borderWidth: 1,\r\n      pointRadius: 4,\r\n      pointHoverRadius: 6\r\n    }));\r\n\r\n    return (\r\n      <Card \r\n        title={\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>鱼类的长度和宽度关系</span>\r\n            <Button \r\n              icon={<DownloadOutlined />} \r\n              size=\"small\"\r\n              onClick={() => downloadChartAsImage(generalScatterRef, '鱼类长度和宽度关系散点图', 'generalScatter')}\r\n              disabled={!chartLoaded.generalScatter}\r\n            >\r\n              下载\r\n            </Button>\r\n          </div>\r\n        } \r\n        bordered={true}\r\n      >\r\n        <div style={{ height: '350px' }}>\r\n          <Scatter\r\n            ref={generalScatterRef}\r\n            data={{\r\n              datasets: datasets\r\n            }}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: function(context) {\r\n                      const point = context.parsed;\r\n                      return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\r\n                    }\r\n                  }\r\n                }\r\n              },\r\n              scales: {\r\n                x: {\r\n                  type: 'linear',\r\n                  position: 'bottom',\r\n                  title: {\r\n                    display: true,\r\n                    text: '长度 (cm)'\r\n                  }\r\n                },\r\n                y: {\r\n                  title: {\r\n                    display: true,\r\n                    text: '宽度 (cm)'\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n            onRender={(chart) => {\r\n              console.log('通用散点图渲染完成');\r\n              setChartLoaded(prev => ({ ...prev, generalScatter: true }));\r\n            }}\r\n          />\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // 渲染特定鱼种的散点图（带回归线）\r\n  const renderSingleSpeciesScatterChart = () => {\r\n    if (!fishData || !fishData.single_species_data) return null;\r\n\r\n    const { single_species_data } = fishData;\r\n    const { species, data, stats } = single_species_data;\r\n\r\n    // 准备散点数据\r\n    const scatterData = data.map(item => ({\r\n      x: item['Length1(cm)'],\r\n      y: item['Width(cm)']\r\n    }));\r\n\r\n    // 计算回归线数据\r\n    const regressionLine = calculateRegressionLine(scatterData);\r\n\r\n    return (\r\n      <Card\r\n        title={\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>{`${species} 的长度和宽度关系 (相关系数: ${stats.correlation.toFixed(2)})`}</span>\r\n            <Button \r\n              icon={<DownloadOutlined />} \r\n              size=\"small\"\r\n              onClick={() => downloadChartAsImage(singleSpeciesRef, `${species}长度和宽度关系分析图`, 'singleSpecies')}\r\n              disabled={!chartLoaded.singleSpecies}\r\n            >\r\n              下载\r\n            </Button>\r\n          </div>\r\n        }\r\n        borderColor=\"#1890ff\"\r\n        style={{ borderWidth: 2 }}\r\n      >\r\n        <div style={{ height: '350px' }}>\r\n          <Scatter\r\n            ref={singleSpeciesRef}\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: `${species} 样本点`,\r\n                  data: scatterData,\r\n                  backgroundColor: 'rgba(30, 144, 255, 0.5)',\r\n                  borderColor: 'rgba(30, 144, 255, 1)',\r\n                  borderWidth: 1,\r\n                  pointRadius: 4,\r\n                  pointHoverRadius: 6\r\n                },\r\n                {\r\n                  label: '回归线',\r\n                  data: regressionLine,\r\n                  backgroundColor: 'rgba(220, 20, 60, 0)',\r\n                  borderColor: 'rgba(220, 20, 60, 1)',\r\n                  borderWidth: 2,\r\n                  pointRadius: 0,\r\n                  showLine: true,\r\n                  fill: false\r\n                }\r\n              ]\r\n            }}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: function(context) {\r\n                      if (context.dataset.label === '回归线') {\r\n                        return [`回归线: y = ${regressionLine.slope.toFixed(4)}x + ${regressionLine.intercept.toFixed(4)}`];\r\n                      }\r\n                      const point = context.parsed;\r\n                      return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\r\n                    }\r\n                  }\r\n                }\r\n              },\r\n              scales: {\r\n                x: {\r\n                  type: 'linear',\r\n                  position: 'bottom',\r\n                  title: {\r\n                    display: true,\r\n                    text: '长度 (cm)'\r\n                  }\r\n                },\r\n                y: {\r\n                  title: {\r\n                    display: true,\r\n                    text: '宽度 (cm)'\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n            onRender={(chart) => {\r\n              console.log('特定鱼种散点图渲染完成');\r\n              setChartLoaded(prev => ({ ...prev, singleSpecies: true }));\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ padding: '10px', backgroundColor: '#f5f7fa', borderRadius: '4px', marginTop: '10px' }}>\r\n          <p>样本数量: {stats.sample_size} | 平均长度: {stats.avg_length.toFixed(2)} cm | 平均宽度: {stats.avg_width.toFixed(2)} cm</p>\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // 计算回归线\r\n  const calculateRegressionLine = (dataPoints) => {\r\n    const xValues = dataPoints.map(p => p.x);\r\n    const yValues = dataPoints.map(p => p.y);\r\n\r\n    const n = xValues.length;\r\n    let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      sumX += xValues[i];\r\n      sumY += yValues[i];\r\n      sumXY += xValues[i] * yValues[i];\r\n      sumX2 += xValues[i] * xValues[i];\r\n    }\r\n\r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\r\n    const intercept = (sumY - slope * sumX) / n;\r\n\r\n    // 生成回归线上的点\r\n    const xMin = Math.min(...xValues);\r\n    const xMax = Math.max(...xValues);\r\n    const regressionPoints = [\r\n      { x: xMin, y: slope * xMin + intercept },\r\n      { x: xMax, y: slope * xMax + intercept }\r\n    ];\r\n\r\n    return {\r\n      data: regressionPoints,\r\n      slope: slope,\r\n      intercept: intercept\r\n    };\r\n  };\r\n\r\n  // 生成随机颜色\r\n  const getRandomColor = (alpha = 1) => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n  };\r\n\r\n  // 处理鱼种选择\r\n  const handleSpeciesChange = (value) => {\r\n    // 重置图表加载状态\r\n    setChartLoaded({\r\n      bar: false,\r\n      generalScatter: false,\r\n      singleSpecies: false\r\n    });\r\n    setSelectedSpecies(value);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h1 style={{\r\n        textAlign: 'center',\r\n        color: '#1890ff',\r\n        marginBottom: '30px',\r\n        fontSize: '2rem',\r\n        fontWeight: '600'\r\n      }}>\r\n        鱼类数据可视化分析\r\n      </h1>\r\n\r\n      <Spin spinning={isLoading} tip=\"加载鱼类数据...\">\r\n        <div style={{ marginBottom: '30px', textAlign: 'center' }}>\r\n          <Select\r\n            value={selectedSpecies}\r\n            onChange={handleSpeciesChange}\r\n            style={{ width: '300px', height: '52px', fontSize: '16px' }}\r\n            placeholder=\"选择鱼种查看详细分析\"\r\n          >\r\n            <Option value=\"\">全部鱼类</Option>\r\n            {availableSpecies.map((species, index) => (\r\n              <Option key={index} value={species}>{species}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n\r\n        <Row gutter={16}>\r\n          <Col xs={24} md={12}>\r\n            {renderWeightBarChart()}\r\n          </Col>\r\n          <Col xs={24} md={12}>\r\n            {renderGeneralScatterChart()}\r\n          </Col>\r\n        </Row>\r\n\r\n        {selectedSpecies && renderSingleSpeciesScatterChart()}\r\n      </Spin>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FishDataVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Card,Row,Col,Select,Spin,message}from'antd';import{Bar,Scatter}from'react-chartjs-2';import Chart from'chart.js/auto';// 导入 Select.Option\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const{Option}=Select;function FishDataVisualization(){const[fishData,setFishData]=useState(null);const[isLoading,setIsLoading]=useState(true);const[selectedSpecies,setSelectedSpecies]=useState('');const[availableSpecies,setAvailableSpecies]=useState([]);// 从后端获取鱼类数据\nuseEffect(()=>{fetchFishData();},[selectedSpecies]);const fetchFishData=async()=>{setIsLoading(true);try{const formData=new FormData();if(selectedSpecies){formData.append('species',selectedSpecies);}const response=await fetch('http://localhost:3001/visualize-fish',{method:'POST',body:formData});if(!response.ok)throw new Error(await response.text());const data=await response.json();setFishData(data);// 提取可用的鱼种列表\nif(data.bar_chart_data){const species=data.bar_chart_data.map(item=>item.Species);setAvailableSpecies(species);}}catch(err){message.error(err.message);}finally{setIsLoading(false);}};// 渲染平均重量柱状图\nconst renderWeightBarChart=()=>{if(!fishData||!fishData.bar_chart_data)return null;const{bar_chart_data}=fishData;const labels=bar_chart_data.map(item=>item.Species);const values=bar_chart_data.map(item=>item['Weight(g)']);return/*#__PURE__*/_jsx(Card,{title:\"\\u6BCF\\u79CD\\u9C7C\\u7C7B\\u7684\\u5E73\\u5747\\u91CD\\u91CF\",bordered:true,children:/*#__PURE__*/_jsx(\"div\",{style:{height:'350px'},children:/*#__PURE__*/_jsx(Bar,{data:{labels:labels,datasets:[{label:'平均重量 (g)',data:values,backgroundColor:['rgba(54, 162, 235, 0.7)','rgba(255, 99, 132, 0.7)','rgba(255, 206, 86, 0.7)','rgba(75, 192, 192, 0.7)','rgba(153, 102, 255, 0.7)','rgba(255, 159, 64, 0.7)','rgba(173, 216, 230, 0.7)'],borderColor:['rgb(54, 162, 235)','rgb(255, 99, 132)','rgb(255, 206, 86)','rgb(75, 192, 192)','rgb(153, 102, 255)','rgb(255, 159, 64)','rgb(173, 216, 230)'],borderWidth:1}]},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{position:'top'}},scales:{y:{beginAtZero:true,title:{display:true,text:'平均重量 (g)'}}}}})})});};// 渲染所有鱼类长度和宽度关系散点图\nconst renderGeneralScatterChart=()=>{if(!fishData||!fishData.scatter_chart_data)return null;// 按鱼种分组数据\nconst speciesGroups={};fishData.scatter_chart_data.forEach(item=>{if(!speciesGroups[item.Species]){speciesGroups[item.Species]=[];}speciesGroups[item.Species].push({x:item['Length1(cm)'],y:item['Width(cm)']});});// 为每个鱼种创建数据集\nconst datasets=Object.keys(speciesGroups).map(species=>({label:species,data:speciesGroups[species],backgroundColor:getRandomColor(0.7),borderColor:getRandomColor(),borderWidth:1,pointRadius:4,pointHoverRadius:6}));return/*#__PURE__*/_jsx(Card,{title:\"\\u9C7C\\u7C7B\\u7684\\u957F\\u5EA6\\u548C\\u5BBD\\u5EA6\\u5173\\u7CFB\",bordered:true,children:/*#__PURE__*/_jsx(\"div\",{style:{height:'350px'},children:/*#__PURE__*/_jsx(Scatter,{data:{datasets:datasets},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{position:'top'},tooltip:{callbacks:{label:function(context){const point=context.parsed;return[`长度: ${point.x} cm`,`宽度: ${point.y} cm`];}}}},scales:{x:{type:'linear',position:'bottom',title:{display:true,text:'长度 (cm)'}},y:{title:{display:true,text:'宽度 (cm)'}}}}})})});};// 渲染特定鱼种的散点图（带回归线）\nconst renderSingleSpeciesScatterChart=()=>{if(!fishData||!fishData.single_species_data)return null;const{single_species_data}=fishData;const{species,data,stats}=single_species_data;// 准备散点数据\nconst scatterData=data.map(item=>({x:item['Length1(cm)'],y:item['Width(cm)']}));// 计算回归线数据\nconst regressionLine=calculateRegressionLine(scatterData);return/*#__PURE__*/_jsxs(Card,{title:`${species} 的长度和宽度关系 (相关系数: ${stats.correlation.toFixed(2)})`,borderColor:\"#1890ff\",style:{borderWidth:2},children:[/*#__PURE__*/_jsx(\"div\",{style:{height:'350px'},children:/*#__PURE__*/_jsx(Scatter,{data:{datasets:[{label:`${species} 样本点`,data:scatterData,backgroundColor:'rgba(30, 144, 255, 0.5)',borderColor:'rgba(30, 144, 255, 1)',borderWidth:1,pointRadius:4,pointHoverRadius:6},{label:'回归线',data:regressionLine,backgroundColor:'rgba(220, 20, 60, 0)',borderColor:'rgba(220, 20, 60, 1)',borderWidth:2,pointRadius:0,showLine:true,fill:false}]},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{position:'top'},tooltip:{callbacks:{label:function(context){if(context.dataset.label==='回归线'){return[`回归线: y = ${regressionLine.slope.toFixed(4)}x + ${regressionLine.intercept.toFixed(4)}`];}const point=context.parsed;return[`长度: ${point.x} cm`,`宽度: ${point.y} cm`];}}}},scales:{x:{type:'linear',position:'bottom',title:{display:true,text:'长度 (cm)'}},y:{title:{display:true,text:'宽度 (cm)'}}}}})}),/*#__PURE__*/_jsx(\"div\",{style:{padding:'10px',backgroundColor:'#f5f7fa',borderRadius:'4px',marginTop:'10px'},children:/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u6837\\u672C\\u6570\\u91CF: \",stats.sample_size,\" | \\u5E73\\u5747\\u957F\\u5EA6: \",stats.avg_length.toFixed(2),\" cm | \\u5E73\\u5747\\u5BBD\\u5EA6: \",stats.avg_width.toFixed(2),\" cm\"]})})]});};// 计算回归线\nconst calculateRegressionLine=dataPoints=>{const xValues=dataPoints.map(p=>p.x);const yValues=dataPoints.map(p=>p.y);const n=xValues.length;let sumX=0,sumY=0,sumXY=0,sumX2=0;for(let i=0;i<n;i++){sumX+=xValues[i];sumY+=yValues[i];sumXY+=xValues[i]*yValues[i];sumX2+=xValues[i]*xValues[i];}const slope=(n*sumXY-sumX*sumY)/(n*sumX2-sumX*sumX);const intercept=(sumY-slope*sumX)/n;// 生成回归线上的点\nconst xMin=Math.min(...xValues);const xMax=Math.max(...xValues);const regressionPoints=[{x:xMin,y:slope*xMin+intercept},{x:xMax,y:slope*xMax+intercept}];return{data:regressionPoints,slope:slope,intercept:intercept};};// 生成随机颜色\nconst getRandomColor=function(){let alpha=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;const r=Math.floor(Math.random()*256);const g=Math.floor(Math.random()*256);const b=Math.floor(Math.random()*256);return`rgba(${r}, ${g}, ${b}, ${alpha})`;};// 处理鱼种选择\nconst handleSpeciesChange=value=>{setSelectedSpecies(value);};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px'},children:[/*#__PURE__*/_jsx(\"h1\",{style:{textAlign:'center',color:'#1890ff',marginBottom:'30px',fontSize:'2rem',fontWeight:'600'},children:\"\\u9C7C\\u7C7B\\u6570\\u636E\\u53EF\\u89C6\\u5316\\u5206\\u6790\"}),/*#__PURE__*/_jsxs(Spin,{spinning:isLoading,tip:\"\\u52A0\\u8F7D\\u9C7C\\u7C7B\\u6570\\u636E...\",children:[/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:'30px',textAlign:'center'},children:/*#__PURE__*/_jsxs(Select,{value:selectedSpecies,onChange:handleSpeciesChange,style:{width:'300px',height:'52px',fontSize:'16px'},placeholder:\"\\u9009\\u62E9\\u9C7C\\u79CD\\u67E5\\u770B\\u8BE6\\u7EC6\\u5206\\u6790\",children:[/*#__PURE__*/_jsx(Option,{value:\"\",children:\"\\u5168\\u90E8\\u9C7C\\u7C7B\"}),availableSpecies.map((species,index)=>/*#__PURE__*/_jsx(Option,{value:species,children:species},index))]})}),/*#__PURE__*/_jsxs(Row,{gutter:16,children:[/*#__PURE__*/_jsx(Col,{xs:24,md:12,children:renderWeightBarChart()}),/*#__PURE__*/_jsx(Col,{xs:24,md:12,children:renderGeneralScatterChart()})]}),selectedSpecies&&renderSingleSpeciesScatterChart()]})]});}export default FishDataVisualization;","map":{"version":3,"names":["React","useState","useEffect","Card","Row","Col","Select","Spin","message","Bar","Scatter","Chart","jsx","_jsx","jsxs","_jsxs","Option","FishDataVisualization","fishData","setFishData","isLoading","setIsLoading","selectedSpecies","setSelectedSpecies","availableSpecies","setAvailableSpecies","fetchFishData","formData","FormData","append","response","fetch","method","body","ok","Error","text","data","json","bar_chart_data","species","map","item","Species","err","error","renderWeightBarChart","labels","values","title","bordered","children","style","height","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","scales","y","beginAtZero","display","renderGeneralScatterChart","scatter_chart_data","speciesGroups","forEach","push","x","Object","keys","getRandomColor","pointRadius","pointHoverRadius","tooltip","callbacks","context","point","parsed","type","renderSingleSpeciesScatterChart","single_species_data","stats","scatterData","regressionLine","calculateRegressionLine","correlation","toFixed","showLine","fill","dataset","slope","intercept","padding","borderRadius","marginTop","sample_size","avg_length","avg_width","dataPoints","xValues","p","yValues","n","length","sumX","sumY","sumXY","sumX2","i","xMin","Math","min","xMax","max","regressionPoints","alpha","arguments","undefined","r","floor","random","g","b","handleSpeciesChange","value","textAlign","color","marginBottom","fontSize","fontWeight","spinning","tip","onChange","width","placeholder","index","gutter","xs","md"],"sources":["D:/软件工程/智慧海洋牧场可视化系统/frontend/src/pages/FishVisualization.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, Row, Col, Select, Spin, message } from 'antd';\r\nimport { Bar, Scatter } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\n\r\n// 导入 Select.Option\r\nconst { Option } = Select;\r\n\r\nfunction FishDataVisualization() {\r\n  const [fishData, setFishData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedSpecies, setSelectedSpecies] = useState('');\r\n  const [availableSpecies, setAvailableSpecies] = useState([]);\r\n\r\n  // 从后端获取鱼类数据\r\n  useEffect(() => {\r\n    fetchFishData();\r\n  }, [selectedSpecies]);\r\n\r\n  const fetchFishData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const formData = new FormData();\r\n      if (selectedSpecies) {\r\n        formData.append('species', selectedSpecies);\r\n      }\r\n\r\n      const response = await fetch('http://localhost:3001/visualize-fish', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n\r\n      if (!response.ok) throw new Error(await response.text());\r\n\r\n      const data = await response.json();\r\n      setFishData(data);\r\n\r\n      // 提取可用的鱼种列表\r\n      if (data.bar_chart_data) {\r\n        const species = data.bar_chart_data.map(item => item.Species);\r\n        setAvailableSpecies(species);\r\n      }\r\n\r\n    } catch (err) {\r\n      message.error(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 渲染平均重量柱状图\r\n  const renderWeightBarChart = () => {\r\n    if (!fishData || !fishData.bar_chart_data) return null;\r\n\r\n    const { bar_chart_data } = fishData;\r\n    const labels = bar_chart_data.map(item => item.Species);\r\n    const values = bar_chart_data.map(item => item['Weight(g)']);\r\n\r\n    return (\r\n      <Card title=\"每种鱼类的平均重量\" bordered={true}>\r\n        <div style={{ height: '350px' }}>\r\n          <Bar\r\n            data={{\r\n              labels: labels,\r\n              datasets: [{\r\n                label: '平均重量 (g)',\r\n                data: values,\r\n                backgroundColor: [\r\n                  'rgba(54, 162, 235, 0.7)',\r\n                  'rgba(255, 99, 132, 0.7)',\r\n                  'rgba(255, 206, 86, 0.7)',\r\n                  'rgba(75, 192, 192, 0.7)',\r\n                  'rgba(153, 102, 255, 0.7)',\r\n                  'rgba(255, 159, 64, 0.7)',\r\n                  'rgba(173, 216, 230, 0.7)'\r\n                ],\r\n                borderColor: [\r\n                  'rgb(54, 162, 235)',\r\n                  'rgb(255, 99, 132)',\r\n                  'rgb(255, 206, 86)',\r\n                  'rgb(75, 192, 192)',\r\n                  'rgb(153, 102, 255)',\r\n                  'rgb(255, 159, 64)',\r\n                  'rgb(173, 216, 230)'\r\n                ],\r\n                borderWidth: 1\r\n              }]\r\n            }}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                }\r\n              },\r\n              scales: {\r\n                y: {\r\n                  beginAtZero: true,\r\n                  title: {\r\n                    display: true,\r\n                    text: '平均重量 (g)'\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // 渲染所有鱼类长度和宽度关系散点图\r\n  const renderGeneralScatterChart = () => {\r\n    if (!fishData || !fishData.scatter_chart_data) return null;\r\n\r\n    // 按鱼种分组数据\r\n    const speciesGroups = {};\r\n    fishData.scatter_chart_data.forEach(item => {\r\n      if (!speciesGroups[item.Species]) {\r\n        speciesGroups[item.Species] = [];\r\n      }\r\n      speciesGroups[item.Species].push({\r\n        x: item['Length1(cm)'],\r\n        y: item['Width(cm)']\r\n      });\r\n    });\r\n\r\n    // 为每个鱼种创建数据集\r\n    const datasets = Object.keys(speciesGroups).map(species => ({\r\n      label: species,\r\n      data: speciesGroups[species],\r\n      backgroundColor: getRandomColor(0.7),\r\n      borderColor: getRandomColor(),\r\n      borderWidth: 1,\r\n      pointRadius: 4,\r\n      pointHoverRadius: 6\r\n    }));\r\n\r\n    return (\r\n      <Card title=\"鱼类的长度和宽度关系\" bordered={true}>\r\n        <div style={{ height: '350px' }}>\r\n          <Scatter\r\n            data={{\r\n              datasets: datasets\r\n            }}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: function(context) {\r\n                      const point = context.parsed;\r\n                      return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\r\n                    }\r\n                  }\r\n                }\r\n              },\r\n              scales: {\r\n                x: {\r\n                  type: 'linear',\r\n                  position: 'bottom',\r\n                  title: {\r\n                    display: true,\r\n                    text: '长度 (cm)'\r\n                  }\r\n                },\r\n                y: {\r\n                  title: {\r\n                    display: true,\r\n                    text: '宽度 (cm)'\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // 渲染特定鱼种的散点图（带回归线）\r\n  const renderSingleSpeciesScatterChart = () => {\r\n    if (!fishData || !fishData.single_species_data) return null;\r\n\r\n    const { single_species_data } = fishData;\r\n    const { species, data, stats } = single_species_data;\r\n\r\n    // 准备散点数据\r\n    const scatterData = data.map(item => ({\r\n      x: item['Length1(cm)'],\r\n      y: item['Width(cm)']\r\n    }));\r\n\r\n    // 计算回归线数据\r\n    const regressionLine = calculateRegressionLine(scatterData);\r\n\r\n    return (\r\n      <Card\r\n        title={`${species} 的长度和宽度关系 (相关系数: ${stats.correlation.toFixed(2)})`}\r\n        borderColor=\"#1890ff\"\r\n        style={{ borderWidth: 2 }}\r\n      >\r\n        <div style={{ height: '350px' }}>\r\n          <Scatter\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: `${species} 样本点`,\r\n                  data: scatterData,\r\n                  backgroundColor: 'rgba(30, 144, 255, 0.5)',\r\n                  borderColor: 'rgba(30, 144, 255, 1)',\r\n                  borderWidth: 1,\r\n                  pointRadius: 4,\r\n                  pointHoverRadius: 6\r\n                },\r\n                {\r\n                  label: '回归线',\r\n                  data: regressionLine,\r\n                  backgroundColor: 'rgba(220, 20, 60, 0)',\r\n                  borderColor: 'rgba(220, 20, 60, 1)',\r\n                  borderWidth: 2,\r\n                  pointRadius: 0,\r\n                  showLine: true,\r\n                  fill: false\r\n                }\r\n              ]\r\n            }}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: function(context) {\r\n                      if (context.dataset.label === '回归线') {\r\n                        return [`回归线: y = ${regressionLine.slope.toFixed(4)}x + ${regressionLine.intercept.toFixed(4)}`];\r\n                      }\r\n                      const point = context.parsed;\r\n                      return [`长度: ${point.x} cm`, `宽度: ${point.y} cm`];\r\n                    }\r\n                  }\r\n                }\r\n              },\r\n              scales: {\r\n                x: {\r\n                  type: 'linear',\r\n                  position: 'bottom',\r\n                  title: {\r\n                    display: true,\r\n                    text: '长度 (cm)'\r\n                  }\r\n                },\r\n                y: {\r\n                  title: {\r\n                    display: true,\r\n                    text: '宽度 (cm)'\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ padding: '10px', backgroundColor: '#f5f7fa', borderRadius: '4px', marginTop: '10px' }}>\r\n          <p>样本数量: {stats.sample_size} | 平均长度: {stats.avg_length.toFixed(2)} cm | 平均宽度: {stats.avg_width.toFixed(2)} cm</p>\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // 计算回归线\r\n  const calculateRegressionLine = (dataPoints) => {\r\n    const xValues = dataPoints.map(p => p.x);\r\n    const yValues = dataPoints.map(p => p.y);\r\n\r\n    const n = xValues.length;\r\n    let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      sumX += xValues[i];\r\n      sumY += yValues[i];\r\n      sumXY += xValues[i] * yValues[i];\r\n      sumX2 += xValues[i] * xValues[i];\r\n    }\r\n\r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\r\n    const intercept = (sumY - slope * sumX) / n;\r\n\r\n    // 生成回归线上的点\r\n    const xMin = Math.min(...xValues);\r\n    const xMax = Math.max(...xValues);\r\n    const regressionPoints = [\r\n      { x: xMin, y: slope * xMin + intercept },\r\n      { x: xMax, y: slope * xMax + intercept }\r\n    ];\r\n\r\n    return {\r\n      data: regressionPoints,\r\n      slope: slope,\r\n      intercept: intercept\r\n    };\r\n  };\r\n\r\n  // 生成随机颜色\r\n  const getRandomColor = (alpha = 1) => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n  };\r\n\r\n  // 处理鱼种选择\r\n  const handleSpeciesChange = (value) => {\r\n    setSelectedSpecies(value);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h1 style={{\r\n        textAlign: 'center',\r\n        color: '#1890ff',\r\n        marginBottom: '30px',\r\n        fontSize: '2rem',\r\n        fontWeight: '600'\r\n      }}>\r\n        鱼类数据可视化分析\r\n      </h1>\r\n\r\n      <Spin spinning={isLoading} tip=\"加载鱼类数据...\">\r\n        <div style={{ marginBottom: '30px', textAlign: 'center' }}>\r\n          <Select\r\n            value={selectedSpecies}\r\n            onChange={handleSpeciesChange}\r\n            style={{ width: '300px', height: '52px', fontSize: '16px' }}\r\n            placeholder=\"选择鱼种查看详细分析\"\r\n          >\r\n            <Option value=\"\">全部鱼类</Option>\r\n            {availableSpecies.map((species, index) => (\r\n              <Option key={index} value={species}>{species}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n\r\n        <Row gutter={16}>\r\n          <Col xs={24} md={12}>\r\n            {renderWeightBarChart()}\r\n          </Col>\r\n          <Col xs={24} md={12}>\r\n            {renderGeneralScatterChart()}\r\n          </Col>\r\n        </Row>\r\n\r\n        {selectedSpecies && renderSingleSpeciesScatterChart()}\r\n      </Spin>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FishDataVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
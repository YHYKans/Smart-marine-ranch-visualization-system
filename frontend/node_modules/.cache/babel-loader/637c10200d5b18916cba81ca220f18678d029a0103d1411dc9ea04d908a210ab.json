{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u8F6F\\u4EF6\\u5DE5\\u7A0B\\\\\\u667A\\u6167\\u6D77\\u6D0B\\u7267\\u573A\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\\\\SoftwareProject\\\\frontend\\\\src\\\\pages\\\\AuthPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport LoginForm from '../components/LoginForm';\nimport RegisterForm from '../components/RegisterForm';\n\n/**\r\n * AuthPage 组件 - 认证页面\r\n * \r\n * 功能：\r\n * 1. 提供用户登录和注册的界面\r\n * 2. 支持在登录和注册模式之间切换\r\n * 3. 检查用户认证状态，已登录用户自动跳转到相应的仪表板\r\n * 4. 根据用户类型（普通用户/管理员）跳转到不同的仪表板\r\n * \r\n * 页面结构：\r\n * - 渐变背景\r\n * - 居中的白色卡片容器\r\n * - 动态标题（根据模式显示\"用户登录\"或\"用户注册\"）\r\n * - 条件渲染登录或注册表单\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthPage = () => {\n  _s();\n  // 控制显示登录还是注册表单的状态\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  // 从认证上下文获取认证状态和用户信息\n  const {\n    isAuthenticated,\n    userInfo\n  } = useAuth();\n\n  // 路由导航钩子\n  const navigate = useNavigate();\n\n  /**\r\n   * 监听认证状态变化\r\n   * 如果用户已登录，根据用户类型自动跳转到对应的仪表板\r\n   */\n  useEffect(() => {\n    if (isAuthenticated) {\n      // 管理员跳转到管理员仪表板，普通用户跳转到用户仪表板\n      navigate(userInfo.isAdmin ? '/admin-dashboard' : '/user-dashboard');\n    }\n  }, [isAuthenticated, userInfo, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center min-h-screen bg-gradient-to-r from-blue-100 to-purple-100\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-8 rounded-lg shadow-lg w-96 transition-all duration-300 transform hover:scale-105\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold text-gray-800\",\n          children: isLoginMode ? '用户登录' : '用户注册'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mt-2\",\n          children: isLoginMode ? '欢迎回来' : '创建新账号'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), isLoginMode ? /*#__PURE__*/_jsxDEV(LoginForm, {\n        switchToRegister: () => setIsLoginMode(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RegisterForm, {\n        switchToLogin: () => setIsLoginMode(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"BFIH1h4aR8vDPkv6C0yRF2gQlSY=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = AuthPage;\nexport default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useAuth","LoginForm","RegisterForm","jsxDEV","_jsxDEV","AuthPage","_s","isLoginMode","setIsLoginMode","isAuthenticated","userInfo","navigate","isAdmin","className","children","fileName","_jsxFileName","lineNumber","columnNumber","switchToRegister","switchToLogin","_c","$RefreshReg$"],"sources":["D:/软件工程/智慧海洋牧场可视化系统/SoftwareProject/frontend/src/pages/AuthPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport LoginForm from '../components/LoginForm';\r\nimport RegisterForm from '../components/RegisterForm';\r\n\r\n/**\r\n * AuthPage 组件 - 认证页面\r\n * \r\n * 功能：\r\n * 1. 提供用户登录和注册的界面\r\n * 2. 支持在登录和注册模式之间切换\r\n * 3. 检查用户认证状态，已登录用户自动跳转到相应的仪表板\r\n * 4. 根据用户类型（普通用户/管理员）跳转到不同的仪表板\r\n * \r\n * 页面结构：\r\n * - 渐变背景\r\n * - 居中的白色卡片容器\r\n * - 动态标题（根据模式显示\"用户登录\"或\"用户注册\"）\r\n * - 条件渲染登录或注册表单\r\n */\r\nconst AuthPage = () => {\r\n  // 控制显示登录还是注册表单的状态\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  \r\n  // 从认证上下文获取认证状态和用户信息\r\n  const { isAuthenticated, userInfo } = useAuth();\r\n  \r\n  // 路由导航钩子\r\n  const navigate = useNavigate();\r\n\r\n  /**\r\n   * 监听认证状态变化\r\n   * 如果用户已登录，根据用户类型自动跳转到对应的仪表板\r\n   */\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      // 管理员跳转到管理员仪表板，普通用户跳转到用户仪表板\r\n      navigate(userInfo.isAdmin ? '/admin-dashboard' : '/user-dashboard');\r\n    }\r\n  }, [isAuthenticated, userInfo, navigate]);\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-r from-blue-100 to-purple-100\">\r\n      {/* \r\n        主容器卡片\r\n        - bg-white: 白色背景\r\n        - p-8: 内边距\r\n        - rounded-lg: 圆角\r\n        - shadow-lg: 阴影\r\n        - w-96: 固定宽度\r\n        - transition-all duration-300: 过渡动画\r\n        - transform hover:scale-105: 悬停时轻微放大效果\r\n      */}\r\n      <div className=\"bg-white p-8 rounded-lg shadow-lg w-96 transition-all duration-300 transform hover:scale-105\">\r\n        {/* 页面标题区域 */}\r\n        <div className=\"text-center mb-8\">\r\n          {/* 动态标题 - 根据当前模式显示不同文字 */}\r\n          <h1 className=\"text-3xl font-bold text-gray-800\">\r\n            {isLoginMode ? '用户登录' : '用户注册'}\r\n          </h1>\r\n          {/* 副标题 - 根据当前模式显示不同文字 */}\r\n          <p className=\"text-gray-600 mt-2\">\r\n            {isLoginMode ? '欢迎回来' : '创建新账号'}\r\n          </p>\r\n        </div>\r\n        \r\n        {/* 条件渲染登录或注册表单 */}\r\n        {isLoginMode ? (\r\n          <LoginForm switchToRegister={() => setIsLoginMode(false)} />\r\n        ) : (\r\n          <RegisterForm switchToLogin={() => setIsLoginMode(true)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,YAAY,MAAM,4BAA4B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,SAAAC,MAAA,IAAAC,OAAA;AAeA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAM;IAAEY,eAAe;IAAEC;EAAS,CAAC,GAAGV,OAAO,CAAC,CAAC;;EAE/C;EACA,MAAMW,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAE9B;AACF;AACA;AACA;EACED,SAAS,CAAC,MAAM;IACd,IAAIW,eAAe,EAAE;MACnB;MACAE,QAAQ,CAACD,QAAQ,CAACE,OAAO,GAAG,kBAAkB,GAAG,iBAAiB,CAAC;IACrE;EACF,CAAC,EAAE,CAACH,eAAe,EAAEC,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAEzC,oBACEP,OAAA;IAAKS,SAAS,EAAC,4FAA4F;IAAAC,QAAA,eAWzGV,OAAA;MAAKS,SAAS,EAAC,8FAA8F;MAAAC,QAAA,gBAE3GV,OAAA;QAAKS,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAE/BV,OAAA;UAAIS,SAAS,EAAC,kCAAkC;UAAAC,QAAA,EAC7CP,WAAW,GAAG,MAAM,GAAG;QAAM;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC,eAELd,OAAA;UAAGS,SAAS,EAAC,oBAAoB;UAAAC,QAAA,EAC9BP,WAAW,GAAG,MAAM,GAAG;QAAO;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,EAGLX,WAAW,gBACVH,OAAA,CAACH,SAAS;QAACkB,gBAAgB,EAAEA,CAAA,KAAMX,cAAc,CAAC,KAAK;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAE5Dd,OAAA,CAACF,YAAY;QAACkB,aAAa,EAAEA,CAAA,KAAMZ,cAAc,CAAC,IAAI;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAC3D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACZ,EAAA,CAvDID,QAAQ;EAAA,QAK0BL,OAAO,EAG5BD,WAAW;AAAA;AAAAsB,EAAA,GARxBhB,QAAQ;AAyDd,eAAeA,QAAQ;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
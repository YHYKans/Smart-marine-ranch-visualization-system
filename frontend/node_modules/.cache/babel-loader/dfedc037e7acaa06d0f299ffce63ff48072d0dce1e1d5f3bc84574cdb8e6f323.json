{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u8F6F\\u4EF6\\u5DE5\\u7A0B\\\\\\u667A\\u6167\\u6D77\\u6D0B\\u7267\\u573A\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthContext.js 完整修复示例\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:3001';\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userInfo, setUserInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 验证令牌有效性\n  const validateToken = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return false;\n      const result = await apiRequest('/api/user');\n      return !!result;\n    } catch (error) {\n      console.error('令牌验证失败:', error);\n      return false;\n    }\n  };\n\n  // 安全存储令牌\n  const storeToken = (token, userData) => {\n    if (!token || !userData) return;\n    const normalizedUser = {\n      ...userData,\n      isAdmin: Boolean(userData.isAdmin)\n    };\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(normalizedUser));\n    setIsAuthenticated(true);\n    setUserInfo(normalizedUser);\n  };\n\n  // API请求方法\n  const apiRequest = async (endpoint, method = 'GET', data = null) => {\n    console.log(`API请求: ${method} ${API_BASE_URL}${endpoint}`);\n    const config = {\n      method,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    };\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['x-auth-token'] = token;\n    }\n    if (data) {\n      config.body = JSON.stringify(data);\n      console.log('请求数据:', data);\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n      console.log(`API响应: ${response.status}`);\n      const text = await response.text();\n      const json = text ? JSON.parse(text) : {};\n      if (!response.ok) {\n        console.error('API错误:', json);\n        throw new Error(json.message || '请求失败');\n      }\n      return json;\n    } catch (error) {\n      console.error('API异常:', error);\n      throw error;\n    }\n  };\n\n  // 改进的 authFetch 方法\n  const authFetch = async (url, options = {}) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.warn('请求缺少令牌');\n      }\n      const config = {\n        method: options.method || 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(token ? {\n            'x-auth-token': token\n          } : {})\n        },\n        credentials: 'include'\n      };\n      if (options.body) {\n        config.body = JSON.stringify(options.body);\n      }\n      const fullUrl = url.startsWith('/') ? `${API_BASE_URL}${url}` : url;\n      console.log(`authFetch请求: ${fullUrl}`, {\n        headers: config.headers\n      });\n      const response = await fetch(fullUrl, config);\n      console.log(`authFetch响应: ${response.status}`);\n      if (response.status === 401) {\n        console.error('未授权，清除会话');\n        logout();\n        return {\n          ok: false,\n          status: 401,\n          json: () => ({\n            message: '会话已过期，请重新登录'\n          })\n        };\n      }\n      const text = await response.text();\n      const json = text ? JSON.parse(text) : {};\n      return {\n        ok: response.ok,\n        status: response.status,\n        json: () => json\n      };\n    } catch (error) {\n      console.error('authFetch异常:', error);\n      return {\n        ok: false,\n        status: 500,\n        json: () => ({\n          message: '网络请求失败'\n        })\n      };\n    }\n  };\n\n  // 初始化时检查认证状态\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n      const userStr = localStorage.getItem('user');\n      if (token && userStr) {\n        try {\n          const isValid = await validateToken();\n          if (isValid) {\n            const storedUser = JSON.parse(userStr);\n            const normalizedUser = {\n              ...storedUser,\n              isAdmin: Boolean(storedUser.isAdmin)\n            };\n            setIsAuthenticated(true);\n            setUserInfo(normalizedUser);\n            console.log('已恢复认证状态');\n          } else {\n            console.log('令牌无效，清除存储');\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n          }\n        } catch (error) {\n          console.error('检查认证状态时出错:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  // 登录方法\n  const login = async (username, password, isAdmin) => {\n    try {\n      const data = await apiRequest('/api/login', 'POST', {\n        username,\n        password,\n        isAdmin\n      });\n      console.log('登录API返回:', data);\n      if (!data.token) {\n        throw new Error('登录失败：未收到令牌');\n      }\n      storeToken(data.token, data.user);\n      return data;\n    } catch (error) {\n      console.error('登录错误:', error);\n      throw error;\n    }\n  };\n\n  // 登出方法\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    setUserInfo(null);\n  };\n  const value = {\n    isAuthenticated,\n    userInfo,\n    loading,\n    login,\n    logout,\n    authFetch\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"pbXGSZ+SUQjZXIYHquUWAeGf1f8=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","userInfo","setUserInfo","loading","setLoading","validateToken","token","localStorage","getItem","result","apiRequest","error","console","storeToken","userData","normalizedUser","isAdmin","Boolean","setItem","JSON","stringify","endpoint","method","data","log","config","headers","credentials","body","response","fetch","status","text","json","parse","ok","Error","message","authFetch","url","options","warn","fullUrl","startsWith","logout","checkAuth","userStr","isValid","storedUser","removeItem","login","username","password","user","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/软件工程/智慧海洋牧场可视化系统/frontend/src/context/AuthContext.js"],"sourcesContent":["// AuthContext.js 完整修复示例\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001';\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // 验证令牌有效性\r\n  const validateToken = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return false;\r\n      \r\n      const result = await apiRequest('/api/user');\r\n      return !!result;\r\n    } catch (error) {\r\n      console.error('令牌验证失败:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 安全存储令牌\r\n  const storeToken = (token, userData) => {\r\n    if (!token || !userData) return;\r\n    \r\n    const normalizedUser = {\r\n      ...userData,\r\n      isAdmin: Boolean(userData.isAdmin)\r\n    };\r\n    \r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('user', JSON.stringify(normalizedUser));\r\n    \r\n    setIsAuthenticated(true);\r\n    setUserInfo(normalizedUser);\r\n  };\r\n\r\n  // API请求方法\r\n  const apiRequest = async (endpoint, method = 'GET', data = null) => {\r\n    console.log(`API请求: ${method} ${API_BASE_URL}${endpoint}`);\r\n    \r\n    const config = {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'include'\r\n    };\r\n\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['x-auth-token'] = token;\r\n    }\r\n\r\n    if (data) {\r\n      config.body = JSON.stringify(data);\r\n      console.log('请求数据:', data);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n      console.log(`API响应: ${response.status}`);\r\n      \r\n      const text = await response.text();\r\n      const json = text ? JSON.parse(text) : {};\r\n      \r\n      if (!response.ok) {\r\n        console.error('API错误:', json);\r\n        throw new Error(json.message || '请求失败');\r\n      }\r\n      \r\n      return json;\r\n    } catch (error) {\r\n      console.error('API异常:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 改进的 authFetch 方法\r\n  const authFetch = async (url, options = {}) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.warn('请求缺少令牌');\r\n      }\r\n      \r\n      const config = {\r\n        method: options.method || 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token ? { 'x-auth-token': token } : {})\r\n        },\r\n        credentials: 'include'\r\n      };\r\n\r\n      if (options.body) {\r\n        config.body = JSON.stringify(options.body);\r\n      }\r\n\r\n      const fullUrl = url.startsWith('/') ? `${API_BASE_URL}${url}` : url;\r\n      console.log(`authFetch请求: ${fullUrl}`, { headers: config.headers });\r\n      \r\n      const response = await fetch(fullUrl, config);\r\n      console.log(`authFetch响应: ${response.status}`);\r\n      \r\n      if (response.status === 401) {\r\n        console.error('未授权，清除会话');\r\n        logout();\r\n        return {\r\n          ok: false,\r\n          status: 401,\r\n          json: () => ({ message: '会话已过期，请重新登录' })\r\n        };\r\n      }\r\n      \r\n      const text = await response.text();\r\n      const json = text ? JSON.parse(text) : {};\r\n      \r\n      return {\r\n        ok: response.ok,\r\n        status: response.status,\r\n        json: () => json\r\n      };\r\n    } catch (error) {\r\n      console.error('authFetch异常:', error);\r\n      return {\r\n        ok: false,\r\n        status: 500,\r\n        json: () => ({ message: '网络请求失败' })\r\n      };\r\n    }\r\n  };\r\n\r\n  // 初始化时检查认证状态\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const userStr = localStorage.getItem('user');\r\n      \r\n      if (token && userStr) {\r\n        try {\r\n          const isValid = await validateToken();\r\n          if (isValid) {\r\n            const storedUser = JSON.parse(userStr);\r\n            const normalizedUser = {\r\n              ...storedUser,\r\n              isAdmin: Boolean(storedUser.isAdmin)\r\n            };\r\n            \r\n            setIsAuthenticated(true);\r\n            setUserInfo(normalizedUser);\r\n            console.log('已恢复认证状态');\r\n          } else {\r\n            console.log('令牌无效，清除存储');\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n          }\r\n        } catch (error) {\r\n          console.error('检查认证状态时出错:', error);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n    \r\n    checkAuth();\r\n  }, []);\r\n\r\n  // 登录方法\r\n  const login = async (username, password, isAdmin) => {\r\n    try {\r\n      const data = await apiRequest('/api/login', 'POST', { \r\n        username, \r\n        password, \r\n        isAdmin \r\n      });\r\n      \r\n      console.log('登录API返回:', data);\r\n      \r\n      if (!data.token) {\r\n        throw new Error('登录失败：未收到令牌');\r\n      }\r\n      \r\n      storeToken(data.token, data.user);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('登录错误:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 登出方法\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setIsAuthenticated(false);\r\n    setUserInfo(null);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    userInfo,\r\n    loading,\r\n    login,\r\n    logout,\r\n    authFetch\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
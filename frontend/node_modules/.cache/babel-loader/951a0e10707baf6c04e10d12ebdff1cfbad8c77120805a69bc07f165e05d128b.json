{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';// 定义API基础URL\nimport{jsx as _jsx}from\"react/jsx-runtime\";const API_BASE_URL='http://localhost:3001';// 创建认证上下文\nconst AuthContext=/*#__PURE__*/createContext();// 自定义 Hook，用于在组件中访问认证上下文\nexport const useAuth=()=>useContext(AuthContext);/**\r\n * AuthProvider 组件 - 认证状态管理提供者\r\n */export const AuthProvider=_ref=>{let{children}=_ref;// 认证状态\nconst[isAuthenticated,setIsAuthenticated]=useState(false);// 用户信息\nconst[userInfo,setUserInfo]=useState(null);// 加载状态\nconst[loading,setLoading]=useState(true);/**\r\n   * 自定义API请求函数 - 处理所有HTTP请求\r\n   */const apiRequest=async function(endpoint){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'GET';let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;console.log(`发送请求到: ${API_BASE_URL}${endpoint}`);const config={method,headers:{'Content-Type':'application/json'},credentials:'include'};// 添加认证令牌（如果存在）\nconst token=localStorage.getItem('token');if(token){config.headers['x-auth-token']=token;}// 添加请求体（如果有）\nif(data){config.body=JSON.stringify(data);console.log('请求数据:',data);}try{const response=await fetch(`${API_BASE_URL}${endpoint}`,config);console.log(`收到响应: 状态码 ${response.status}`);// 处理响应内容\nconst text=await response.text();console.log(`响应文本: ${text.substring(0,150)}...`);let result;try{result=text?JSON.parse(text):{};console.log('解析后的响应数据:',result);}catch(e){console.error('响应解析错误:',e);console.error('原始响应:',text);throw new Error(`无法解析响应: ${text.substring(0,100)}...`);}if(!response.ok){throw new Error(result.message||'请求失败');}return result;}catch(error){console.error('API请求错误:',error);throw error;}};/**\r\n   * 组件挂载时检查本地存储的认证信息\r\n   */useEffect(()=>{const checkAuth=async()=>{// 从本地存储获取 token 和用户信息\nconst token=localStorage.getItem('token');const userStr=localStorage.getItem('user');if(token&&userStr){try{// 验证 token 是否仍然有效\nconst result=await apiRequest('/api/user');// 解析存储的用户信息\nconst storedUser=JSON.parse(userStr);console.log('存储的用户信息:',storedUser);// 确保isAdmin是布尔值\nconst normalizedUser={...storedUser,isAdmin:Boolean(storedUser.isAdmin)};// token 有效，恢复登录状态\nsetIsAuthenticated(true);setUserInfo(normalizedUser);// 更新本地存储中的用户信息（确保isAdmin是布尔值）\nlocalStorage.setItem('user',JSON.stringify(normalizedUser));}catch(error){console.error('验证令牌时出错:',error);// 发生错误时清除本地存储\nlocalStorage.removeItem('token');localStorage.removeItem('user');}}// 检查完成，设置 loading 为 false\nsetLoading(false);};checkAuth();},[]);/**\r\n   * 登录方法\r\n   */const login=async(username,password,isAdmin)=>{try{const data=await apiRequest('/api/login','POST',{username,password,isAdmin});console.log('登录响应:',data);// 确保用户信息中的isAdmin是布尔值\nconst userData={...data.user,isAdmin:Boolean(data.user.isAdmin)};console.log('处理后的用户数据:',userData);// 保存 token 到本地存储\nif(data.token){localStorage.setItem('token',data.token);}// 保存用户信息到本地存储\nlocalStorage.setItem('user',JSON.stringify(userData));// 更新认证状态\nsetIsAuthenticated(true);setUserInfo(userData);return data;}catch(error){throw error;}};/**\r\n   * 注册方法\r\n   */const register=async(username,email,password,isAdmin,adminCode)=>{try{// 构建注册数据\nconst userData={username,email,password,isAdmin};// 如果是管理员注册，添加管理员代码\nif(isAdmin&&adminCode){userData.adminCode=adminCode;}// 发送注册请求\nconst data=await apiRequest('/api/register','POST',userData);return data;}catch(error){throw error;}};/**\r\n   * 登出方法\r\n   */const logout=async()=>{try{const token=localStorage.getItem('token');// 如果有 token，向服务器发送登出请求\nif(token){await apiRequest('/api/logout','POST');}}catch(error){console.error('登出请求失败:',error);}finally{// 无论请求是否成功，都清除本地认证信息\nlocalStorage.removeItem('token');localStorage.removeItem('user');setIsAuthenticated(false);setUserInfo(null);}};/**\r\n   * 带认证的请求方法\r\n   */const authFetch=async function(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{// 请求配置\nconst config={method:options.method||'GET',headers:{'Content-Type':'application/json'},credentials:'include'};// 添加认证令牌\nconst token=localStorage.getItem('token');if(token){config.headers['x-auth-token']=token;}// 添加请求体\nif(options.body){config.body=options.body;}// 发送请求\nconst fullUrl=url.startsWith('/')?`${API_BASE_URL}${url}`:url;console.log(`authFetch请求: ${fullUrl}`);const response=await fetch(fullUrl,config);console.log(`authFetch响应状态: ${response.status}`);// 特别处理401错误\nif(response.status===401){logout();throw new Error('会话已过期，请重新登录');}// 返回完整的response对象，包括status\nreturn{ok:response.ok,status:response.status,json:async()=>{const text=await response.text();try{return text?JSON.parse(text):{};}catch(e){console.error('响应解析错误:',e);return{message:text};}}};}catch(error){console.error('authFetch错误:',error);return{ok:false,status:500,json:async()=>({message:error.message})};}};// 提供给子组件的值\nconst value={isAuthenticated,userInfo,loading,login,register,logout,authFetch};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","API_BASE_URL","AuthContext","useAuth","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","userInfo","setUserInfo","loading","setLoading","apiRequest","endpoint","method","arguments","length","undefined","data","console","log","config","headers","credentials","token","localStorage","getItem","body","JSON","stringify","response","fetch","status","text","substring","result","parse","e","error","Error","ok","message","checkAuth","userStr","storedUser","normalizedUser","isAdmin","Boolean","setItem","removeItem","login","username","password","userData","user","register","email","adminCode","logout","authFetch","url","options","fullUrl","startsWith","json","value","Provider"],"sources":["D:/软件工程/智慧海洋牧场可视化系统/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// 定义API基础URL\r\nconst API_BASE_URL = 'http://localhost:3001';\r\n\r\n// 创建认证上下文\r\nconst AuthContext = createContext();\r\n\r\n// 自定义 Hook，用于在组件中访问认证上下文\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n/**\r\n * AuthProvider 组件 - 认证状态管理提供者\r\n */\r\nexport const AuthProvider = ({ children }) => {\r\n  // 认证状态\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  // 用户信息\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  // 加载状态\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  /**\r\n   * 自定义API请求函数 - 处理所有HTTP请求\r\n   */\r\n  const apiRequest = async (endpoint, method = 'GET', data = null) => {\r\n    console.log(`发送请求到: ${API_BASE_URL}${endpoint}`);\r\n    \r\n    const config = {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'include'\r\n    };\r\n\r\n    // 添加认证令牌（如果存在）\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['x-auth-token'] = token;\r\n    }\r\n\r\n    // 添加请求体（如果有）\r\n    if (data) {\r\n      config.body = JSON.stringify(data);\r\n      console.log('请求数据:', data);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n      console.log(`收到响应: 状态码 ${response.status}`);\r\n      \r\n      // 处理响应内容\r\n      const text = await response.text();\r\n      console.log(`响应文本: ${text.substring(0, 150)}...`);\r\n      \r\n      let result;\r\n      try {\r\n        result = text ? JSON.parse(text) : {};\r\n        console.log('解析后的响应数据:', result);\r\n      } catch (e) {\r\n        console.error('响应解析错误:', e);\r\n        console.error('原始响应:', text);\r\n        throw new Error(`无法解析响应: ${text.substring(0, 100)}...`);\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(result.message || '请求失败');\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error('API请求错误:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 组件挂载时检查本地存储的认证信息\r\n   */\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      // 从本地存储获取 token 和用户信息\r\n      const token = localStorage.getItem('token');\r\n      const userStr = localStorage.getItem('user');\r\n      \r\n      if (token && userStr) {\r\n        try {\r\n          // 验证 token 是否仍然有效\r\n          const result = await apiRequest('/api/user');\r\n          \r\n          // 解析存储的用户信息\r\n          const storedUser = JSON.parse(userStr);\r\n          console.log('存储的用户信息:', storedUser);\r\n          \r\n          // 确保isAdmin是布尔值\r\n          const normalizedUser = {\r\n            ...storedUser,\r\n            isAdmin: Boolean(storedUser.isAdmin)\r\n          };\r\n          \r\n          // token 有效，恢复登录状态\r\n          setIsAuthenticated(true);\r\n          setUserInfo(normalizedUser);\r\n          \r\n          // 更新本地存储中的用户信息（确保isAdmin是布尔值）\r\n          localStorage.setItem('user', JSON.stringify(normalizedUser));\r\n          \r\n        } catch (error) {\r\n          console.error('验证令牌时出错:', error);\r\n          // 发生错误时清除本地存储\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n        }\r\n      }\r\n      \r\n      // 检查完成，设置 loading 为 false\r\n      setLoading(false);\r\n    };\r\n    \r\n    checkAuth();\r\n  }, []);\r\n\r\n  /**\r\n   * 登录方法\r\n   */\r\n  const login = async (username, password, isAdmin) => {\r\n    try {\r\n      const data = await apiRequest('/api/login', 'POST', { \r\n        username, \r\n        password, \r\n        isAdmin \r\n      });\r\n      \r\n      console.log('登录响应:', data);\r\n      \r\n      // 确保用户信息中的isAdmin是布尔值\r\n      const userData = {\r\n        ...data.user,\r\n        isAdmin: Boolean(data.user.isAdmin)\r\n      };\r\n      \r\n      console.log('处理后的用户数据:', userData);\r\n      \r\n      // 保存 token 到本地存储\r\n      if (data.token) {\r\n        localStorage.setItem('token', data.token);\r\n      }\r\n      \r\n      // 保存用户信息到本地存储\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      \r\n      // 更新认证状态\r\n      setIsAuthenticated(true);\r\n      setUserInfo(userData);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 注册方法\r\n   */\r\n  const register = async (username, email, password, isAdmin, adminCode) => {\r\n    try {\r\n      // 构建注册数据\r\n      const userData = { username, email, password, isAdmin };\r\n      \r\n      // 如果是管理员注册，添加管理员代码\r\n      if (isAdmin && adminCode) {\r\n        userData.adminCode = adminCode;\r\n      }\r\n      \r\n      // 发送注册请求\r\n      const data = await apiRequest('/api/register', 'POST', userData);\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 登出方法\r\n   */\r\n  const logout = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      // 如果有 token，向服务器发送登出请求\r\n      if (token) {\r\n        await apiRequest('/api/logout', 'POST');\r\n      }\r\n    } catch (error) {\r\n      console.error('登出请求失败:', error);\r\n    } finally {\r\n      // 无论请求是否成功，都清除本地认证信息\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      setIsAuthenticated(false);\r\n      setUserInfo(null);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 带认证的请求方法\r\n   */\r\n  const authFetch = async (url, options = {}) => {\r\n    try {\r\n      // 请求配置\r\n      const config = {\r\n        method: options.method || 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include'\r\n      };\r\n\r\n      // 添加认证令牌\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        config.headers['x-auth-token'] = token;\r\n      }\r\n\r\n      // 添加请求体\r\n      if (options.body) {\r\n        config.body = options.body;\r\n      }\r\n\r\n      // 发送请求\r\n      const fullUrl = url.startsWith('/') ? `${API_BASE_URL}${url}` : url;\r\n      console.log(`authFetch请求: ${fullUrl}`);\r\n      \r\n      const response = await fetch(fullUrl, config);\r\n      console.log(`authFetch响应状态: ${response.status}`);\r\n      \r\n      // 特别处理401错误\r\n      if (response.status === 401) {\r\n        logout();\r\n        throw new Error('会话已过期，请重新登录');\r\n      }\r\n      \r\n      // 返回完整的response对象，包括status\r\n      return {\r\n        ok: response.ok,\r\n        status: response.status,\r\n        json: async () => {\r\n          const text = await response.text();\r\n          try {\r\n            return text ? JSON.parse(text) : {};\r\n          } catch (e) {\r\n            console.error('响应解析错误:', e);\r\n            return { message: text };\r\n          }\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('authFetch错误:', error);\r\n      return {\r\n        ok: false,\r\n        status: 500,\r\n        json: async () => ({ message: error.message })\r\n      };\r\n    }\r\n  };\r\n\r\n  // 提供给子组件的值\r\n  const value = {\r\n    isAuthenticated,\r\n    userInfo,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    authFetch\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\SoftwareProject\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\n\n/**\r\n * ProtectedRoute 组件 - 受保护的路由组件\r\n * \r\n * 功能：\r\n * 1. 保护需要认证才能访问的页面\r\n * 2. 支持基于用户角色的访问控制（普通用户 vs 管理员）\r\n * 3. 未认证用户自动重定向到登录页面\r\n * 4. 普通用户访问管理员页面时重定向到用户仪表板\r\n * 5. 在认证状态检查期间显示加载指示器\r\n * \r\n * Props:\r\n * - children: 需要保护的子组件\r\n * - requireAdmin: 是否需要管理员权限（默认为 false）\r\n * \r\n * 使用场景：\r\n * - 包装需要登录才能访问的页面\r\n * - 包装只有管理员才能访问的页面\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requireAdmin = false\n}) => {\n  _s();\n  // 从认证上下文获取认证状态、用户信息和加载状态\n  const {\n    isAuthenticated,\n    userInfo,\n    loading\n  } = useAuth();\n\n  // 如果正在加载认证状态，显示加载指示器\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500\",\n        children: \"\\u52A0\\u8F7D\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 如果用户未认证，重定向到登录页面\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/auth\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 如果需要管理员权限但用户不是管理员，重定向到用户仪表板\n  if (requireAdmin && !userInfo.isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/user-dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 所有检查通过，渲染受保护的子组件\n  return children;\n};\n_s(ProtectedRoute, \"Fe4AItBhJzDBra9/7ogZSTA9uyM=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","requireAdmin","_s","isAuthenticated","userInfo","loading","className","fileName","_jsxFileName","lineNumber","columnNumber","to","isAdmin","_c","$RefreshReg$"],"sources":["D:/SoftwareProject/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["\r\nimport React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\n/**\r\n * ProtectedRoute 组件 - 受保护的路由组件\r\n * \r\n * 功能：\r\n * 1. 保护需要认证才能访问的页面\r\n * 2. 支持基于用户角色的访问控制（普通用户 vs 管理员）\r\n * 3. 未认证用户自动重定向到登录页面\r\n * 4. 普通用户访问管理员页面时重定向到用户仪表板\r\n * 5. 在认证状态检查期间显示加载指示器\r\n * \r\n * Props:\r\n * - children: 需要保护的子组件\r\n * - requireAdmin: 是否需要管理员权限（默认为 false）\r\n * \r\n * 使用场景：\r\n * - 包装需要登录才能访问的页面\r\n * - 包装只有管理员才能访问的页面\r\n */\r\nconst ProtectedRoute = ({ children, requireAdmin = false }) => {\r\n  // 从认证上下文获取认证状态、用户信息和加载状态\r\n  const { isAuthenticated, userInfo, loading } = useAuth();\r\n\r\n  // 如果正在加载认证状态，显示加载指示器\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-screen\">\r\n        <p className=\"text-gray-500\">加载中...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 如果用户未认证，重定向到登录页面\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/auth\" />;\r\n  }\r\n  \r\n  // 如果需要管理员权限但用户不是管理员，重定向到用户仪表板\r\n  if (requireAdmin && !userInfo.isAdmin) {\r\n    return <Navigate to=\"/user-dashboard\" />;\r\n  }\r\n\r\n  // 所有检查通过，渲染受保护的子组件\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":";;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,wBAAwB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA,SAAAC,MAAA,IAAAC,OAAA;AAkBA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,YAAY,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC7D;EACA,MAAM;IAAEC,eAAe;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,GAAGT,OAAO,CAAC,CAAC;;EAExD;EACA,IAAIS,OAAO,EAAE;IACX,oBACEP,OAAA;MAAKQ,SAAS,EAAC,2CAA2C;MAAAN,QAAA,eACxDF,OAAA;QAAGQ,SAAS,EAAC,eAAe;QAAAN,QAAA,EAAC;MAAM;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC;EAEV;;EAEA;EACA,IAAI,CAACP,eAAe,EAAE;IACpB,oBAAOL,OAAA,CAACH,QAAQ;MAACgB,EAAE,EAAC;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChC;;EAEA;EACA,IAAIT,YAAY,IAAI,CAACG,QAAQ,CAACQ,OAAO,EAAE;IACrC,oBAAOd,OAAA,CAACH,QAAQ;MAACgB,EAAE,EAAC;IAAiB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1C;;EAEA;EACA,OAAOV,QAAQ;AACjB,CAAC;AAACE,EAAA,CAzBIH,cAAc;EAAA,QAE6BH,OAAO;AAAA;AAAAiB,EAAA,GAFlDd,cAAc;AA2BpB,eAAeA,cAAc;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}